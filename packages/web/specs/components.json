{
  "timestamp": "2025-08-01T13:38:37",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.35.1",
    "typescriptVersion": "5.5.4"
  },
  "components": [
    {
      "filePath": "src/components/gcds-alert/gcds-alert.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-alert",
      "readme": "# gcds-alert\n\n\n",
      "docs": "Alert displays an alert message with an optional heading, icon, and close button.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the main content of the alert."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "alertRole",
          "type": "\"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'danger' | 'info' | 'success' | 'warning'",
            "resolved": "\"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "alert-role",
          "reflectToAttr": false,
          "docs": "Defines alert role.",
          "docsTags": [
            {
              "name": "default",
              "text": "'info'"
            }
          ],
          "default": "'info'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "container",
          "type": "\"full\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
          "complexType": {
            "original": "'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs'",
            "resolved": "\"full\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
            "references": {}
          },
          "mutable": false,
          "attr": "container",
          "reflectToAttr": false,
          "docs": "Defines the max width of the alert content.",
          "docsTags": [
            {
              "name": "default",
              "text": "'full'"
            }
          ],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Defines the alert heading.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideCloseBtn",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-close-btn",
          "reflectToAttr": false,
          "docs": "Defines if the alert's close button is displayed or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideRoleIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-role-icon",
          "reflectToAttr": false,
          "docs": "Defines if the alert's role icon is displayed or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "isFixed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "is-fixed",
          "reflectToAttr": false,
          "docs": "Defines if the alert's position is fixed.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "gcdsDismiss",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Events",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the main content of the alert."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-container",
        "gcds-icon"
      ],
      "dependencyGraph": {
        "gcds-alert": [
          "gcds-container",
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-breadcrumbs/gcds-breadcrumbs.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-breadcrumbs",
      "readme": "# gcds-breadcrumbs\n\n\n",
      "docs": "Breadcrumbs is a path to the current page from each preceding level of the site's hierarchy.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the breadcrumb items."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "hideCanadaLink",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-canada-link",
          "reflectToAttr": false,
          "docs": "Defines if the default canada.ca link is displayed or omitted.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the breadcrumb items."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-breadcrumbs-item"
      ],
      "dependencyGraph": {
        "gcds-breadcrumbs": [
          "gcds-breadcrumbs-item"
        ],
        "gcds-breadcrumbs-item": [
          "gcds-link"
        ],
        "gcds-link": [
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-breadcrumbs-item/gcds-breadcrumbs-item.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-breadcrumbs-item",
      "readme": "# gcds-breadcrumbs\n\n\n",
      "docs": "Breadcrumbs item represents a single link in the breadcrumbs navigation.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the breadcrumb item link label."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Specifies the href of the breadcrumb item.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has been clicked. Contains the href in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the breadcrumb item link label."
        }
      ],
      "parts": [],
      "dependents": [
        "gcds-breadcrumbs"
      ],
      "dependencies": [
        "gcds-link"
      ],
      "dependencyGraph": {
        "gcds-breadcrumbs-item": [
          "gcds-link"
        ],
        "gcds-link": [
          "gcds-icon"
        ],
        "gcds-breadcrumbs": [
          "gcds-breadcrumbs-item"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-button/gcds-button.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-button",
      "readme": "# gcds-button\n",
      "docs": "The button is an interactive object that emphasizes an action.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the button/link label."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "buttonId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "button-id",
          "reflectToAttr": false,
          "docs": "The buttonId attribute specifies the id for a <button> element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "buttonRole",
          "type": "\"danger\" | \"primary\" | \"secondary\" | \"start\"",
          "complexType": {
            "original": "| 'start'\n    | 'primary'\n    | 'secondary'\n    | 'danger'",
            "resolved": "\"danger\" | \"primary\" | \"secondary\" | \"start\"",
            "references": {}
          },
          "mutable": true,
          "attr": "button-role",
          "reflectToAttr": false,
          "docs": "Set the main style",
          "docsTags": [
            {
              "name": "default",
              "text": "'primary'"
            }
          ],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "The disabled attribute for a <button> element.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "download",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "The download attribute specifies that the target (the file specified in the href attribute) will be downloaded when a user clicks on the hyperlink",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "The href attribute specifies the URL of the page the link goes to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name attribute specifies the name for a <button> element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rel",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "The rel attribute specifies the relationship between the current document and the linked document",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"regular\" | \"small\"",
          "complexType": {
            "original": "'regular' | 'small'",
            "resolved": "\"regular\" | \"small\"",
            "references": {}
          },
          "mutable": true,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Set the button size",
          "docsTags": [
            {
              "name": "default",
              "text": "'regular'"
            }
          ],
          "default": "'regular'",
          "values": [
            {
              "value": "regular",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "The target attribute specifies where to open the linked document",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"link\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'submit' | 'reset' | 'button' | 'link'",
            "resolved": "\"button\" | \"link\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": true,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Set button types",
          "docsTags": [
            {
              "name": "default",
              "text": "'button'"
            }
          ],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value attribute specifies the value for a <button> element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "string | void",
          "bubbles": true,
          "complexType": {
            "original": "string | void",
            "resolved": "string | void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button has been clicked. Contains the value or href in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the button/link label."
        }
      ],
      "parts": [],
      "dependents": [
        "gcds-search"
      ],
      "dependencies": [
        "gcds-icon"
      ],
      "dependencyGraph": {
        "gcds-button": [
          "gcds-icon"
        ],
        "gcds-search": [
          "gcds-button"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-card/gcds-card.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-card",
      "readme": "# gcds-card\n",
      "docs": "A card is a box containing structured, actionable content on a single topic.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the card description. Will overwrite the description prop if used."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "badge",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "badge",
          "reflectToAttr": true,
          "docs": "The badge attribute specifies the badge text that appears in the top left corner of the card. 20 character limit.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "cardTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "card-title",
          "reflectToAttr": true,
          "docs": "The card title attribute specifies the title that appears on the card",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "cardTitleTag",
          "type": "\"a\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "complexType": {
            "original": "'h3' | 'h4' | 'h5' | 'h6' | 'a'",
            "resolved": "\"a\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
            "references": {}
          },
          "mutable": false,
          "attr": "card-title-tag",
          "reflectToAttr": false,
          "docs": "The card title tag property specifies the HTML heading element for the title.\nThis property does not modify the font size. It is used to assign the heading level\nin order to maintain heading hierarchy and accessibility for assistive technologies.",
          "docsTags": [
            {
              "name": "default",
              "text": "'a'"
            }
          ],
          "default": "'a'",
          "values": [
            {
              "value": "a",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            },
            {
              "value": "h6",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "The description attribute specifies the body of text that appears on the card",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "The href attribute specifies the URL of the page the link goes to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "imgAlt",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "img-alt",
          "reflectToAttr": true,
          "docs": "The img alt attribute specifies the alt text for the image provided, if none, image will be decorative",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "imgSrc",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "img-src",
          "reflectToAttr": true,
          "docs": "The img src attribute specifies the path to the image",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the card loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the card has been clicked. Contains the href in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the card has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the card description. Will overwrite the description prop if used."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-text",
        "gcds-sr-only",
        "gcds-link"
      ],
      "dependencyGraph": {
        "gcds-card": [
          "gcds-text",
          "gcds-sr-only",
          "gcds-link"
        ],
        "gcds-link": [
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-checkboxes/gcds-checkboxes.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-checkboxes",
      "readme": "# gcds-checkbox\n\n\n",
      "docs": "Checkboxes provide a set of options for multiple responses.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Specifies if the checkboxes are disabled or not.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "errorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-message",
          "reflectToAttr": true,
          "docs": "Set this to display an error message for invalid <gcds-checkboxes>",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "hint",
          "reflectToAttr": true,
          "docs": "Hint displayed below the label.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "legend",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "legend",
          "reflectToAttr": true,
          "docs": "Set the legend for fieldset form group.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Name attribute for a checkboxes element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "options",
          "type": "CheckboxObject[] | string",
          "complexType": {
            "original": "string | Array<CheckboxObject>",
            "resolved": "CheckboxObject[] | string",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "CheckboxObject": {
                "location": "import",
                "path": "./checkbox",
                "id": "src/components/gcds-checkboxes/checkbox.tsx::CheckboxObject"
              }
            }
          },
          "mutable": true,
          "attr": "options",
          "reflectToAttr": false,
          "docs": "Options to render checkboxes buttons",
          "docsTags": [],
          "values": [
            {
              "type": "CheckboxObject[]"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Specifies if the checkboxes are required or not.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validateOn",
          "type": "\"blur\" | \"other\" | \"submit\"",
          "complexType": {
            "original": "'blur' | 'submit' | 'other'",
            "resolved": "\"blur\" | \"other\" | \"submit\"",
            "references": {}
          },
          "mutable": true,
          "attr": "validate-on",
          "reflectToAttr": false,
          "docs": "Set event to call validator",
          "docsTags": [
            {
              "name": "default",
              "text": "'blur'"
            }
          ],
          "default": "'blur'",
          "values": [
            {
              "value": "blur",
              "type": "string"
            },
            {
              "value": "other",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validator",
          "type": "(string | ValidatorEntry | Validator<string>)[]",
          "complexType": {
            "original": "Array<\n    string | ValidatorEntry | Validator<string>\n  >",
            "resolved": "(string | ValidatorEntry | Validator<string>)[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "ValidatorEntry": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::ValidatorEntry"
              },
              "Validator": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::Validator"
              }
            }
          },
          "mutable": true,
          "attr": "validator",
          "reflectToAttr": false,
          "docs": "Array of validators",
          "docsTags": [],
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "ValidatorEntry"
            },
            {
              "type": "Validator<string>)[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "string | string[]",
          "complexType": {
            "original": "string | Array<string>",
            "resolved": "string | string[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Value for checkboxes component.",
          "docsTags": [
            {
              "name": "default",
              "text": "[]"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "validate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLGcdsCheckboxesElement": {
                "location": "global",
                "id": "global::HTMLGcdsCheckboxesElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "validate() => Promise<void>",
          "parameters": [],
          "docs": "Call any active validators",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checkbox loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsChange",
          "detail": "string[]",
          "bubbles": true,
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a checkbox has been changed. Contains the new value in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checkbox has been clicked.",
          "docsTags": []
        },
        {
          "event": "gcdsError",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checkbox has a validation error.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checkbox has focus.",
          "docsTags": []
        },
        {
          "event": "gcdsInput",
          "detail": "string[]",
          "bubbles": true,
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a checkbox has been inputted. Contains the new value in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsValid",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checkbox has a validation error.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "formdata",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "submit",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-hint",
        "gcds-error-message",
        "gcds-label"
      ],
      "dependencyGraph": {
        "gcds-checkboxes": [
          "gcds-hint",
          "gcds-error-message",
          "gcds-label"
        ],
        "gcds-hint": [
          "gcds-text"
        ],
        "gcds-error-message": [
          "gcds-text",
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-container/gcds-container.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-container",
      "readme": "# gcds-container\n\n\n",
      "docs": "A container is a basic box layout with a set width for its contents.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the main content of the container."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "border",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "Defines if the container has a border.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "centered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "centered",
          "reflectToAttr": false,
          "docs": "Defines if the container is centered.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "mainContainer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "main-container",
          "reflectToAttr": false,
          "docs": "Defines if the container is the main page container. When true,\nthe width will be set to 90% for smaller screens to ensure consistency\nwith the responsiveness of other core layout components (header + footer).",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "margin",
          "type": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
          "complexType": {
            "original": "SpacingValues",
            "resolved": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
            "references": {
              "SpacingValues": {
                "location": "import",
                "path": "../../utils/types/spacing",
                "id": "src/utils/types/spacing.tsx::SpacingValues"
              }
            }
          },
          "mutable": false,
          "attr": "margin",
          "reflectToAttr": false,
          "docs": "Container margin. Left and right margins won't be applied\nif the container is centered.",
          "docsTags": [],
          "values": [
            {
              "value": "0",
              "type": "string"
            },
            {
              "value": "25",
              "type": "string"
            },
            {
              "value": "50",
              "type": "string"
            },
            {
              "value": "75",
              "type": "string"
            },
            {
              "value": "100",
              "type": "string"
            },
            {
              "value": "125",
              "type": "string"
            },
            {
              "value": "150",
              "type": "string"
            },
            {
              "value": "175",
              "type": "string"
            },
            {
              "value": "200",
              "type": "string"
            },
            {
              "value": "225",
              "type": "string"
            },
            {
              "value": "250",
              "type": "string"
            },
            {
              "value": "300",
              "type": "string"
            },
            {
              "value": "350",
              "type": "string"
            },
            {
              "value": "400",
              "type": "string"
            },
            {
              "value": "450",
              "type": "string"
            },
            {
              "value": "500",
              "type": "string"
            },
            {
              "value": "550",
              "type": "string"
            },
            {
              "value": "600",
              "type": "string"
            },
            {
              "value": "650",
              "type": "string"
            },
            {
              "value": "700",
              "type": "string"
            },
            {
              "value": "750",
              "type": "string"
            },
            {
              "value": "800",
              "type": "string"
            },
            {
              "value": "850",
              "type": "string"
            },
            {
              "value": "900",
              "type": "string"
            },
            {
              "value": "950",
              "type": "string"
            },
            {
              "value": "1000",
              "type": "string"
            },
            {
              "value": "1050",
              "type": "string"
            },
            {
              "value": "1100",
              "type": "string"
            },
            {
              "value": "1150",
              "type": "string"
            },
            {
              "value": "1200",
              "type": "string"
            },
            {
              "value": "1250",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "padding",
          "type": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
          "complexType": {
            "original": "SpacingValues",
            "resolved": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
            "references": {
              "SpacingValues": {
                "location": "import",
                "path": "../../utils/types/spacing",
                "id": "src/utils/types/spacing.tsx::SpacingValues"
              }
            }
          },
          "mutable": false,
          "attr": "padding",
          "reflectToAttr": false,
          "docs": "Defines the container's padding.",
          "docsTags": [],
          "values": [
            {
              "value": "0",
              "type": "string"
            },
            {
              "value": "25",
              "type": "string"
            },
            {
              "value": "50",
              "type": "string"
            },
            {
              "value": "75",
              "type": "string"
            },
            {
              "value": "100",
              "type": "string"
            },
            {
              "value": "125",
              "type": "string"
            },
            {
              "value": "150",
              "type": "string"
            },
            {
              "value": "175",
              "type": "string"
            },
            {
              "value": "200",
              "type": "string"
            },
            {
              "value": "225",
              "type": "string"
            },
            {
              "value": "250",
              "type": "string"
            },
            {
              "value": "300",
              "type": "string"
            },
            {
              "value": "350",
              "type": "string"
            },
            {
              "value": "400",
              "type": "string"
            },
            {
              "value": "450",
              "type": "string"
            },
            {
              "value": "500",
              "type": "string"
            },
            {
              "value": "550",
              "type": "string"
            },
            {
              "value": "600",
              "type": "string"
            },
            {
              "value": "650",
              "type": "string"
            },
            {
              "value": "700",
              "type": "string"
            },
            {
              "value": "750",
              "type": "string"
            },
            {
              "value": "800",
              "type": "string"
            },
            {
              "value": "850",
              "type": "string"
            },
            {
              "value": "900",
              "type": "string"
            },
            {
              "value": "950",
              "type": "string"
            },
            {
              "value": "1000",
              "type": "string"
            },
            {
              "value": "1050",
              "type": "string"
            },
            {
              "value": "1100",
              "type": "string"
            },
            {
              "value": "1150",
              "type": "string"
            },
            {
              "value": "1200",
              "type": "string"
            },
            {
              "value": "1250",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"full\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
          "complexType": {
            "original": "'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs'",
            "resolved": "\"full\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Defines container size.",
          "docsTags": [
            {
              "name": "default",
              "text": "'full'"
            }
          ],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "tag",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tag",
          "reflectToAttr": false,
          "docs": "Set tag for container.",
          "docsTags": [
            {
              "name": "default",
              "text": "'div'"
            }
          ],
          "default": "'div'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the main content of the container."
        }
      ],
      "parts": [],
      "dependents": [
        "gcds-alert",
        "gcds-grid",
        "gcds-phase-banner"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gcds-alert": [
          "gcds-container"
        ],
        "gcds-grid": [
          "gcds-container"
        ],
        "gcds-phase-banner": [
          "gcds-container"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-date-input/gcds-date-input.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-date-input",
      "readme": "# gcds-date-input\n\n\n",
      "docs": "A date input is a space to enter a known date.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Specifies if the date input is disabled or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "errorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-message",
          "reflectToAttr": false,
          "docs": "Error message displayed below the legend and above form fields.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "format",
          "type": "\"compact\" | \"full\"",
          "complexType": {
            "original": "'full' | 'compact'",
            "resolved": "\"compact\" | \"full\"",
            "references": {}
          },
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "Set this property to full to show month, day, and year form elements. Set it to compact to show only the month and year form elements.",
          "docsTags": [],
          "values": [
            {
              "value": "compact",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "Hint displayed below the legend and above form fields.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "legend",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "legend",
          "reflectToAttr": false,
          "docs": "Fieldset legend",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name attribute for the date input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies if a form field is required or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validateOn",
          "type": "\"blur\" | \"other\" | \"submit\"",
          "complexType": {
            "original": "'blur' | 'submit' | 'other'",
            "resolved": "\"blur\" | \"other\" | \"submit\"",
            "references": {}
          },
          "mutable": true,
          "attr": "validate-on",
          "reflectToAttr": false,
          "docs": "Set event to call validator",
          "docsTags": [
            {
              "name": "default",
              "text": "'blur'"
            }
          ],
          "default": "'blur'",
          "values": [
            {
              "value": "blur",
              "type": "string"
            },
            {
              "value": "other",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validator",
          "type": "(string | ValidatorEntry | Validator<string>)[]",
          "complexType": {
            "original": "Array<\n    string | ValidatorEntry | Validator<string>\n  >",
            "resolved": "(string | ValidatorEntry | Validator<string>)[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "ValidatorEntry": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::ValidatorEntry"
              },
              "Validator": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::Validator"
              }
            }
          },
          "mutable": true,
          "attr": "validator",
          "reflectToAttr": false,
          "docs": "Array of validators",
          "docsTags": [],
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "ValidatorEntry"
            },
            {
              "type": "Validator<string>)[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default value for the date input element. Format: YYYY-MM-DD",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "validate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLGcdsDateInputElement": {
                "location": "global",
                "id": "global::HTMLGcdsDateInputElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "validate() => Promise<void>",
          "parameters": [],
          "docs": "Call any active validators",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when an date-input loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when an date-input has changed. Contains the new value in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsError",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when an date-input has a validation error.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when an date-input has focus.",
          "docsTags": []
        },
        {
          "event": "gcdsInput",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the date-input has received input. Contains the new value in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsValid",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when an date-input has validated.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "submit",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-select",
        "gcds-input",
        "gcds-hint",
        "gcds-error-message"
      ],
      "dependencyGraph": {
        "gcds-date-input": [
          "gcds-select",
          "gcds-input",
          "gcds-hint",
          "gcds-error-message"
        ],
        "gcds-select": [
          "gcds-label",
          "gcds-hint",
          "gcds-error-message"
        ],
        "gcds-hint": [
          "gcds-text"
        ],
        "gcds-error-message": [
          "gcds-text",
          "gcds-icon"
        ],
        "gcds-input": [
          "gcds-label",
          "gcds-hint",
          "gcds-error-message"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-date-modified/gcds-date-modified.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-date-modified",
      "readme": "# gcds-date-modified\n\n\n",
      "docs": "Date modified is an indicator of the last update to a webpage or application.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the date/version number."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "type",
          "type": "\"date\" | \"version\"",
          "complexType": {
            "original": "'date' | 'version'",
            "resolved": "\"date\" | \"version\"",
            "references": {}
          },
          "mutable": true,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Set date modified type. Default is date.",
          "docsTags": [
            {
              "name": "default",
              "text": "'date'"
            }
          ],
          "default": "'date'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "version",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the date/version number."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-text"
      ],
      "dependencyGraph": {
        "gcds-date-modified": [
          "gcds-text"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-details/gcds-details.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-details",
      "readme": "# gcds-details\n\n\n",
      "docs": "Details is an interactive switch for a person to expand or collapse content.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the main content of the details panel."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "detailsTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "details-title",
          "reflectToAttr": false,
          "docs": "The details title summarizes the panel content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Defines if the details panel is open by default or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Methods",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the details loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the details has been clicked.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the details has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the main content of the details panel."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/gcds-error-message/gcds-error-message.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-error-message",
      "readme": "# gcds-error-message\n\n\n",
      "docs": "An error message is a description of a problem blocking a user goal.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the error message content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "messageId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "message-id",
          "reflectToAttr": false,
          "docs": "Id attribute for the error message.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the error message content."
        }
      ],
      "parts": [],
      "dependents": [
        "gcds-checkboxes",
        "gcds-date-input",
        "gcds-file-uploader",
        "gcds-input",
        "gcds-radios",
        "gcds-select",
        "gcds-textarea"
      ],
      "dependencies": [
        "gcds-text",
        "gcds-icon"
      ],
      "dependencyGraph": {
        "gcds-error-message": [
          "gcds-text",
          "gcds-icon"
        ],
        "gcds-checkboxes": [
          "gcds-error-message"
        ],
        "gcds-date-input": [
          "gcds-error-message"
        ],
        "gcds-file-uploader": [
          "gcds-error-message"
        ],
        "gcds-input": [
          "gcds-error-message"
        ],
        "gcds-radios": [
          "gcds-error-message"
        ],
        "gcds-select": [
          "gcds-error-message"
        ],
        "gcds-textarea": [
          "gcds-error-message"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-error-summary/gcds-error-summary.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-error-summary",
      "readme": "# gcds-error-summary\n\n\n",
      "docs": "An error summary is a list of user errors in a form.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "errorLinks",
          "type": "object | string",
          "complexType": {
            "original": "string | object",
            "resolved": "object | string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-links",
          "reflectToAttr": false,
          "docs": "Object of list items for error list. Format: { link-href: link-label }",
          "docsTags": [],
          "values": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": true,
          "docs": "Set error summary heading",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "listen",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "listen",
          "reflectToAttr": false,
          "docs": "Specifies if the error summary should listen for GcdsError event to generate error list.",
          "docsTags": [
            {
              "name": "default",
              "text": "true"
            }
          ],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has been clicked.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has focus.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "gcdsError",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "gcdsValid",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "submit",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-heading",
        "gcds-link"
      ],
      "dependencyGraph": {
        "gcds-error-summary": [
          "gcds-heading",
          "gcds-link"
        ],
        "gcds-link": [
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-fieldset/gcds-fieldset.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-fieldset",
      "readme": "# gcds-fieldset\n\n\n",
      "docs": "A fieldset is a group of multiple form components or elements.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the form elements."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": true,
          "docs": "Hint displayed below the legend.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "legend",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "legend",
          "reflectToAttr": true,
          "docs": "The title for the contents of the fieldset",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "legendSize",
          "type": "\"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "complexType": {
            "original": "'h2' | 'h3' | 'h4' | 'h5' | 'h6'",
            "resolved": "\"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
            "references": {}
          },
          "mutable": true,
          "attr": "legend-size",
          "reflectToAttr": false,
          "docs": "Sets the appropriate font size for the fieldset legend.",
          "docsTags": [],
          "values": [
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            },
            {
              "value": "h6",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the form elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-hint"
      ],
      "dependencyGraph": {
        "gcds-fieldset": [
          "gcds-hint"
        ],
        "gcds-hint": [
          "gcds-text"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-file-uploader/gcds-file-uploader.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-file-uploader",
      "readme": "# gcds-file-uploader\n",
      "docs": "A file uploader is a space to select and add supporting documentation.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": true,
          "docs": "Defines the file types the file uploader accepts.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Specifies if a file uploader element is disabled or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "errorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-message",
          "reflectToAttr": true,
          "docs": "Error message for an invalid file uploader element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "files",
          "type": "FileList",
          "complexType": {
            "original": "FileList",
            "resolved": "FileList",
            "references": {
              "FileList": {
                "location": "global",
                "id": "global::FileList"
              }
            }
          },
          "mutable": true,
          "attr": "files",
          "reflectToAttr": false,
          "docs": "FileList of uploaded files to input",
          "docsTags": [],
          "values": [
            {
              "type": "FileList"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": true,
          "docs": "Hint displayed below the label.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Form field label.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": true,
          "docs": "Boolean that specifies if the user is allowed to select more than one file.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name attribute for file input element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Specifies if a form field is required or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "uploaderId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "uploader-id",
          "reflectToAttr": true,
          "docs": "Id attribute for a file uploader element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "validateOn",
          "type": "\"blur\" | \"other\" | \"submit\"",
          "complexType": {
            "original": "'blur' | 'submit' | 'other'",
            "resolved": "\"blur\" | \"other\" | \"submit\"",
            "references": {}
          },
          "mutable": true,
          "attr": "validate-on",
          "reflectToAttr": false,
          "docs": "Set event to call validator",
          "docsTags": [
            {
              "name": "default",
              "text": "'blur'"
            }
          ],
          "default": "'blur'",
          "values": [
            {
              "value": "blur",
              "type": "string"
            },
            {
              "value": "other",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validator",
          "type": "(string | ValidatorEntry | Validator<string | number | FileList>)[]",
          "complexType": {
            "original": "Array<\n    string | ValidatorEntry | Validator<string | number | FileList>\n  >",
            "resolved": "(string | ValidatorEntry | Validator<string | number | FileList>)[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "ValidatorEntry": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::ValidatorEntry"
              },
              "Validator": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::Validator"
              },
              "FileList": {
                "location": "global",
                "id": "global::FileList"
              }
            }
          },
          "mutable": true,
          "attr": "validator",
          "reflectToAttr": false,
          "docs": "Array of validators",
          "docsTags": [],
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "ValidatorEntry"
            },
            {
              "type": "Validator<string"
            },
            {
              "type": "number"
            },
            {
              "type": "FileList>)[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "string[]",
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value for a file uploader element.",
          "docsTags": [
            {
              "name": "default",
              "text": "[]"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "validate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLGcdsFileUploaderElement": {
                "location": "global",
                "id": "global::HTMLGcdsFileUploaderElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "validate() => Promise<void>",
          "parameters": [],
          "docs": "Call any active validators",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the uploader loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsChange",
          "detail": "string[]",
          "bubbles": true,
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the user has made a file selection. Contains the new value in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsError",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the uploader has a validation error.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the uploader has focus.",
          "docsTags": []
        },
        {
          "event": "gcdsInput",
          "detail": "string[]",
          "bubbles": true,
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the user has uploaded a file. Contains the new value in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsRemoveFile",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Remove file and update value.",
          "docsTags": []
        },
        {
          "event": "gcdsValid",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the uploader has a validation error.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "submit",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-label",
        "gcds-hint",
        "gcds-error-message",
        "gcds-sr-only",
        "gcds-text",
        "gcds-icon"
      ],
      "dependencyGraph": {
        "gcds-file-uploader": [
          "gcds-label",
          "gcds-hint",
          "gcds-error-message",
          "gcds-sr-only",
          "gcds-text",
          "gcds-icon"
        ],
        "gcds-hint": [
          "gcds-text"
        ],
        "gcds-error-message": [
          "gcds-text",
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-footer/gcds-footer.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-footer",
      "readme": "# gcds-footer\n",
      "docs": "The footer is the responsive Government of Canada branded footer landmark.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "contextualHeading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "contextual-heading",
          "reflectToAttr": false,
          "docs": "Heading for contextual slot and nav landmark",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "contextualLinks",
          "type": "object | string",
          "complexType": {
            "original": "string | object",
            "resolved": "object | string",
            "references": {}
          },
          "mutable": true,
          "attr": "contextual-links",
          "reflectToAttr": false,
          "docs": "Object of list items for contextual band. Format: { link-label: link-href }",
          "docsTags": [],
          "values": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "display",
          "type": "\"compact\" | \"full\"",
          "complexType": {
            "original": "'compact' | 'full'",
            "resolved": "\"compact\" | \"full\"",
            "references": {}
          },
          "mutable": true,
          "attr": "display",
          "reflectToAttr": true,
          "docs": "Display mode of the footer",
          "docsTags": [
            {
              "name": "default",
              "text": "'compact'"
            }
          ],
          "default": "'compact'",
          "values": [
            {
              "value": "compact",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "subLinks",
          "type": "object | string",
          "complexType": {
            "original": "string | object",
            "resolved": "object | string",
            "references": {}
          },
          "mutable": true,
          "attr": "sub-links",
          "reflectToAttr": false,
          "docs": "Object of list items for sub-footer. Format: { link-label: link-href }",
          "docsTags": [],
          "values": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "wordmarkVariant",
          "type": "\"colour\" | \"white\"",
          "complexType": {
            "original": "'colour' | 'white'",
            "resolved": "\"colour\" | \"white\"",
            "references": {}
          },
          "mutable": false,
          "attr": "wordmark-variant",
          "reflectToAttr": false,
          "docs": "GcdsSignature - The variant of the Government of Canada wordmark",
          "docsTags": [],
          "values": [
            {
              "value": "colour",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has been clicked. Contains the href in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-signature",
        "gcds-sr-only",
        "gcds-link"
      ],
      "dependencyGraph": {
        "gcds-footer": [
          "gcds-signature",
          "gcds-sr-only",
          "gcds-link"
        ],
        "gcds-link": [
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-grid/gcds-grid.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-grid",
      "readme": "# gcds-grid\n\n\n",
      "docs": "A grid is a responsive, flexible column layout to position elements on a page.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the main content of the grid."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "alignContent",
          "type": "\"center\" | \"end\" | \"space-around\" | \"space-between\" | \"space-evenly\" | \"start\" | \"stretch\"",
          "complexType": {
            "original": "ContentValues",
            "resolved": "\"center\" | \"end\" | \"space-around\" | \"space-between\" | \"space-evenly\" | \"start\" | \"stretch\"",
            "references": {
              "ContentValues": {
                "location": "local",
                "path": "/Users/ethanwallace/Documents/work/gcds-components/packages/web/src/components/gcds-grid/gcds-grid.tsx",
                "id": "src/components/gcds-grid/gcds-grid.tsx::ContentValues"
              }
            }
          },
          "mutable": false,
          "attr": "align-content",
          "reflectToAttr": false,
          "docs": "If total grid size is less than the size of its grid container,\nthis property aligns the grid along the block (column) axis",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "space-around",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            },
            {
              "value": "space-evenly",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "value": "stretch",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "alignItems",
          "type": "\"baseline\" | \"center\" | \"end\" | \"start\" | \"stretch\"",
          "complexType": {
            "original": "'baseline' | 'center' | 'end' | 'start' | 'stretch'",
            "resolved": "\"baseline\" | \"center\" | \"end\" | \"start\" | \"stretch\"",
            "references": {}
          },
          "mutable": false,
          "attr": "align-items",
          "reflectToAttr": false,
          "docs": "Aligns grid items along the block (column) axis",
          "docsTags": [],
          "values": [
            {
              "value": "baseline",
              "type": "string"
            },
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "value": "stretch",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "centered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "centered",
          "reflectToAttr": false,
          "docs": "Defines if grid container is centered or not",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "columns",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "columns",
          "reflectToAttr": false,
          "docs": "Defines the default number of grid columns for all viewports if columns-tablet\nand columns-desktop are not defined. Option to set different layouts for\ndesktop with columns-desktop and for tablet with columns-tablet.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "columnsDesktop",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "columns-desktop",
          "reflectToAttr": false,
          "docs": "Provides option to set a different number of grid columns for desktop screens.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "columnsTablet",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "columns-tablet",
          "reflectToAttr": false,
          "docs": "Provides option to set a different number of grid columns for tablet screens.\nIf columns-desktop is not defined, columns-tablet will be used to define the\nnumber of columns for desktop as well.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "container",
          "type": "\"full\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
          "complexType": {
            "original": "'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs'",
            "resolved": "\"full\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
            "references": {}
          },
          "mutable": false,
          "attr": "container",
          "reflectToAttr": false,
          "docs": "Defines grid container size",
          "docsTags": [],
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "display",
          "type": "\"grid\" | \"inline-grid\"",
          "complexType": {
            "original": "'grid' | 'inline-grid'",
            "resolved": "\"grid\" | \"inline-grid\"",
            "references": {}
          },
          "mutable": false,
          "attr": "display",
          "reflectToAttr": false,
          "docs": "Defines element as grid or inline-grid container",
          "docsTags": [
            {
              "name": "default",
              "text": "'grid'"
            }
          ],
          "default": "'grid'",
          "values": [
            {
              "value": "grid",
              "type": "string"
            },
            {
              "value": "inline-grid",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "equalRowHeight",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "equal-row-height",
          "reflectToAttr": false,
          "docs": "Sets all grid items to have an equal height,\nbased on the tallest item.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "gap",
          "type": "\"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\"",
          "complexType": {
            "original": "GridGapValues",
            "resolved": "\"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\"",
            "references": {
              "GridGapValues": {
                "location": "local",
                "path": "/Users/ethanwallace/Documents/work/gcds-components/packages/web/src/components/gcds-grid/gcds-grid.tsx",
                "id": "src/components/gcds-grid/gcds-grid.tsx::GridGapValues"
              }
            }
          },
          "mutable": true,
          "attr": "gap",
          "reflectToAttr": false,
          "docs": "Defines the horizontal and vertical spacing between items in\na grid container for all viewports if gap-tablet and gap-desktop\nare not defined. Option to set different spacing for desktop\nwith gap-desktop and for tablet with gap-tablet.",
          "docsTags": [
            {
              "name": "default",
              "text": "'300'"
            }
          ],
          "default": "'300'",
          "values": [
            {
              "value": "150",
              "type": "string"
            },
            {
              "value": "175",
              "type": "string"
            },
            {
              "value": "200",
              "type": "string"
            },
            {
              "value": "225",
              "type": "string"
            },
            {
              "value": "250",
              "type": "string"
            },
            {
              "value": "300",
              "type": "string"
            },
            {
              "value": "350",
              "type": "string"
            },
            {
              "value": "400",
              "type": "string"
            },
            {
              "value": "450",
              "type": "string"
            },
            {
              "value": "500",
              "type": "string"
            },
            {
              "value": "550",
              "type": "string"
            },
            {
              "value": "600",
              "type": "string"
            },
            {
              "value": "650",
              "type": "string"
            },
            {
              "value": "700",
              "type": "string"
            },
            {
              "value": "750",
              "type": "string"
            },
            {
              "value": "800",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "gapDesktop",
          "type": "\"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\"",
          "complexType": {
            "original": "GridGapValues",
            "resolved": "\"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\"",
            "references": {
              "GridGapValues": {
                "location": "local",
                "path": "/Users/ethanwallace/Documents/work/gcds-components/packages/web/src/components/gcds-grid/gcds-grid.tsx",
                "id": "src/components/gcds-grid/gcds-grid.tsx::GridGapValues"
              }
            }
          },
          "mutable": true,
          "attr": "gap-desktop",
          "reflectToAttr": false,
          "docs": "Provides option to set horizontal and vertical spacing between items\nin a grid container for desktop screens.",
          "docsTags": [],
          "values": [
            {
              "value": "150",
              "type": "string"
            },
            {
              "value": "175",
              "type": "string"
            },
            {
              "value": "200",
              "type": "string"
            },
            {
              "value": "225",
              "type": "string"
            },
            {
              "value": "250",
              "type": "string"
            },
            {
              "value": "300",
              "type": "string"
            },
            {
              "value": "350",
              "type": "string"
            },
            {
              "value": "400",
              "type": "string"
            },
            {
              "value": "450",
              "type": "string"
            },
            {
              "value": "500",
              "type": "string"
            },
            {
              "value": "550",
              "type": "string"
            },
            {
              "value": "600",
              "type": "string"
            },
            {
              "value": "650",
              "type": "string"
            },
            {
              "value": "700",
              "type": "string"
            },
            {
              "value": "750",
              "type": "string"
            },
            {
              "value": "800",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "gapTablet",
          "type": "\"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\"",
          "complexType": {
            "original": "GridGapValues",
            "resolved": "\"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\"",
            "references": {
              "GridGapValues": {
                "location": "local",
                "path": "/Users/ethanwallace/Documents/work/gcds-components/packages/web/src/components/gcds-grid/gcds-grid.tsx",
                "id": "src/components/gcds-grid/gcds-grid.tsx::GridGapValues"
              }
            }
          },
          "mutable": true,
          "attr": "gap-tablet",
          "reflectToAttr": false,
          "docs": "Provides option to set horizontal and vertical spacing between items in a\ngrid container for tablet screens. If gap-desktop is not defined, gap-tablet\nwill be used to define the spacing for desktop screens as well.",
          "docsTags": [],
          "values": [
            {
              "value": "150",
              "type": "string"
            },
            {
              "value": "175",
              "type": "string"
            },
            {
              "value": "200",
              "type": "string"
            },
            {
              "value": "225",
              "type": "string"
            },
            {
              "value": "250",
              "type": "string"
            },
            {
              "value": "300",
              "type": "string"
            },
            {
              "value": "350",
              "type": "string"
            },
            {
              "value": "400",
              "type": "string"
            },
            {
              "value": "450",
              "type": "string"
            },
            {
              "value": "500",
              "type": "string"
            },
            {
              "value": "550",
              "type": "string"
            },
            {
              "value": "600",
              "type": "string"
            },
            {
              "value": "650",
              "type": "string"
            },
            {
              "value": "700",
              "type": "string"
            },
            {
              "value": "750",
              "type": "string"
            },
            {
              "value": "800",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "justifyContent",
          "type": "\"center\" | \"end\" | \"space-around\" | \"space-between\" | \"space-evenly\" | \"start\" | \"stretch\"",
          "complexType": {
            "original": "ContentValues",
            "resolved": "\"center\" | \"end\" | \"space-around\" | \"space-between\" | \"space-evenly\" | \"start\" | \"stretch\"",
            "references": {
              "ContentValues": {
                "location": "local",
                "path": "/Users/ethanwallace/Documents/work/gcds-components/packages/web/src/components/gcds-grid/gcds-grid.tsx",
                "id": "src/components/gcds-grid/gcds-grid.tsx::ContentValues"
              }
            }
          },
          "mutable": false,
          "attr": "justify-content",
          "reflectToAttr": false,
          "docs": "If total grid size is less than the size of its grid container,\nthis property aligns the grid along the inline (row) axis",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "space-around",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            },
            {
              "value": "space-evenly",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "value": "stretch",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "justifyItems",
          "type": "\"center\" | \"end\" | \"start\" | \"stretch\"",
          "complexType": {
            "original": "'center' | 'end' | 'start' | 'stretch'",
            "resolved": "\"center\" | \"end\" | \"start\" | \"stretch\"",
            "references": {}
          },
          "mutable": false,
          "attr": "justify-items",
          "reflectToAttr": false,
          "docs": "Aligns grid items along the inline (row) axis",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "value": "stretch",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placeContent",
          "type": "\"center\" | \"end\" | \"space-around\" | \"space-between\" | \"space-evenly\" | \"start\" | \"stretch\"",
          "complexType": {
            "original": "ContentValues",
            "resolved": "\"center\" | \"end\" | \"space-around\" | \"space-between\" | \"space-evenly\" | \"start\" | \"stretch\"",
            "references": {
              "ContentValues": {
                "location": "local",
                "path": "/Users/ethanwallace/Documents/work/gcds-components/packages/web/src/components/gcds-grid/gcds-grid.tsx",
                "id": "src/components/gcds-grid/gcds-grid.tsx::ContentValues"
              }
            }
          },
          "mutable": false,
          "attr": "place-content",
          "reflectToAttr": false,
          "docs": "Sets both the align-content + justify-content properties",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "space-around",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            },
            {
              "value": "space-evenly",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "value": "stretch",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placeItems",
          "type": "\"center\" | \"end\" | \"start\" | \"stretch\"",
          "complexType": {
            "original": "'center' | 'end' | 'start' | 'stretch'",
            "resolved": "\"center\" | \"end\" | \"start\" | \"stretch\"",
            "references": {}
          },
          "mutable": false,
          "attr": "place-items",
          "reflectToAttr": false,
          "docs": "Sets both the align-items + justify-items properties",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "value": "stretch",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "tag",
          "type": "\"article\" | \"aside\" | \"div\" | \"dl\" | \"main\" | \"nav\" | \"ol\" | \"section\" | \"ul\"",
          "complexType": {
            "original": "| 'article'\n    | 'aside'\n    | 'div'\n    | 'dl'\n    | 'main'\n    | 'nav'\n    | 'ol'\n    | 'section'\n    | 'ul'",
            "resolved": "\"article\" | \"aside\" | \"div\" | \"dl\" | \"main\" | \"nav\" | \"ol\" | \"section\" | \"ul\"",
            "references": {}
          },
          "mutable": true,
          "attr": "tag",
          "reflectToAttr": false,
          "docs": "Set tag for grid container",
          "docsTags": [
            {
              "name": "default",
              "text": "'div'"
            }
          ],
          "default": "'div'",
          "values": [
            {
              "value": "article",
              "type": "string"
            },
            {
              "value": "aside",
              "type": "string"
            },
            {
              "value": "div",
              "type": "string"
            },
            {
              "value": "dl",
              "type": "string"
            },
            {
              "value": "main",
              "type": "string"
            },
            {
              "value": "nav",
              "type": "string"
            },
            {
              "value": "ol",
              "type": "string"
            },
            {
              "value": "section",
              "type": "string"
            },
            {
              "value": "ul",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the main content of the grid."
        }
      ],
      "parts": [],
      "dependents": [
        "gcds-verify-banner"
      ],
      "dependencies": [
        "gcds-container"
      ],
      "dependencyGraph": {
        "gcds-grid": [
          "gcds-container"
        ],
        "gcds-verify-banner": [
          "gcds-grid"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-grid-col/gcds-grid-col.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-grid-col",
      "readme": "# gcds-grid-col\n\n\n",
      "docs": "A grid column is a single column in a grid layout, allowing for flexible content arrangement.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the main content of the grid coloumn."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "desktop",
          "type": "1 | 10 | 11 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9",
          "complexType": {
            "original": "| 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12",
            "resolved": "1 | 10 | 11 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9",
            "references": {}
          },
          "mutable": true,
          "attr": "desktop",
          "reflectToAttr": false,
          "docs": "Optimize grid column size for desktop (1024px and above).\nDesktop grid column sizes are based on a 12 column grid.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "10",
              "type": "number"
            },
            {
              "value": "11",
              "type": "number"
            },
            {
              "value": "12",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            },
            {
              "value": "7",
              "type": "number"
            },
            {
              "value": "8",
              "type": "number"
            },
            {
              "value": "9",
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "tablet",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "1 | 2 | 3 | 4 | 5 | 6",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {}
          },
          "mutable": true,
          "attr": "tablet",
          "reflectToAttr": false,
          "docs": "Optimize grid column size for tablet (768px - 1023px).\nTablet grid column sizes are based on a 6 column grid.\nThe tablet size will also be used for desktop, if desktop is undefined.",
          "docsTags": [
            {
              "name": "default",
              "text": "6"
            }
          ],
          "default": "6",
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "tag",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tag",
          "reflectToAttr": false,
          "docs": "Set tag for grid column",
          "docsTags": [
            {
              "name": "default",
              "text": "'div'"
            }
          ],
          "default": "'div'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the main content of the grid coloumn."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/gcds-header/gcds-header.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-header",
      "readme": "# gcds-header\n",
      "docs": "The header is the responsive Government of Canada branded header landmark.",
      "docsTags": [
        {
          "name": "slot",
          "text": "banner - Slot to add a banner across the top of the header."
        },
        {
          "name": "slot",
          "text": "breadcrumb - Slot to add breadcrumbs at the bottom of the header."
        },
        {
          "name": "slot",
          "text": "menu - Slot to add a menu below the divider line."
        },
        {
          "name": "slot",
          "text": "search - Slot to add a search field to the right of the header."
        },
        {
          "name": "slot",
          "text": "skip-to-nav - Slot to add a hidden skip to content navigation at the top of the header."
        },
        {
          "name": "slot",
          "text": "signature - Slot to replace Government of Canada signature."
        },
        {
          "name": "slot",
          "text": "toggle - Slot to add a custom language toggle in the top-right of the header."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "langHref",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "lang-href",
          "reflectToAttr": true,
          "docs": "GcdsLangToggle - The href attribute specifies the URL of the opposite language page",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "signatureHasLink",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "signature-has-link",
          "reflectToAttr": false,
          "docs": "GcdsSignature - GCDS signature links to Canada.ca",
          "docsTags": [
            {
              "name": "default",
              "text": "true"
            }
          ],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "signatureVariant",
          "type": "\"colour\" | \"white\"",
          "complexType": {
            "original": "| 'colour'\n    | 'white'",
            "resolved": "\"colour\" | \"white\"",
            "references": {}
          },
          "mutable": false,
          "attr": "signature-variant",
          "reflectToAttr": false,
          "docs": "GcdsSignature - The variant of the Government of Canada signature",
          "docsTags": [],
          "values": [
            {
              "value": "colour",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "skipToHref",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "skip-to-href",
          "reflectToAttr": false,
          "docs": "Top navigation - Skip to content href",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has been clicked. Contains the href in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "banner",
          "docs": "Slot to add a banner across the top of the header."
        },
        {
          "name": "breadcrumb",
          "docs": "Slot to add breadcrumbs at the bottom of the header."
        },
        {
          "name": "menu",
          "docs": "Slot to add a menu below the divider line."
        },
        {
          "name": "search",
          "docs": "Slot to add a search field to the right of the header."
        },
        {
          "name": "signature",
          "docs": "Slot to replace Government of Canada signature."
        },
        {
          "name": "skip-to-nav",
          "docs": "Slot to add a hidden skip to content navigation at the top of the header."
        },
        {
          "name": "toggle",
          "docs": "Slot to add a custom language toggle in the top-right of the header."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-link",
        "gcds-lang-toggle",
        "gcds-signature"
      ],
      "dependencyGraph": {
        "gcds-header": [
          "gcds-link",
          "gcds-lang-toggle",
          "gcds-signature"
        ],
        "gcds-link": [
          "gcds-icon"
        ],
        "gcds-lang-toggle": [
          "gcds-sr-only",
          "gcds-link"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-heading/gcds-heading.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-heading",
      "readme": "# gcds-heading\n\n\n",
      "docs": "A heading is a title that establishes levels of hierarchy to organize page content into a structure and matches Canada.ca typography styles.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the heading content"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "characterLimit",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "character-limit",
          "reflectToAttr": false,
          "docs": "Sets the line length to a maximum amount of characters per line for\neach heading level, ensuring a comfortable, accessible reading length.",
          "docsTags": [
            {
              "name": "default",
              "text": "true"
            }
          ],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "marginBottom",
          "type": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
          "complexType": {
            "original": "SpacingValues",
            "resolved": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
            "references": {
              "SpacingValues": {
                "location": "import",
                "path": "../../utils/types/spacing",
                "id": "src/utils/types/spacing.tsx::SpacingValues"
              }
            }
          },
          "mutable": true,
          "attr": "margin-bottom",
          "reflectToAttr": false,
          "docs": "Adds margin below the heading. The default margin-botttom is 300.",
          "docsTags": [
            {
              "name": "default",
              "text": "'300'"
            }
          ],
          "default": "'300'",
          "values": [
            {
              "value": "0",
              "type": "string"
            },
            {
              "value": "25",
              "type": "string"
            },
            {
              "value": "50",
              "type": "string"
            },
            {
              "value": "75",
              "type": "string"
            },
            {
              "value": "100",
              "type": "string"
            },
            {
              "value": "125",
              "type": "string"
            },
            {
              "value": "150",
              "type": "string"
            },
            {
              "value": "175",
              "type": "string"
            },
            {
              "value": "200",
              "type": "string"
            },
            {
              "value": "225",
              "type": "string"
            },
            {
              "value": "250",
              "type": "string"
            },
            {
              "value": "300",
              "type": "string"
            },
            {
              "value": "350",
              "type": "string"
            },
            {
              "value": "400",
              "type": "string"
            },
            {
              "value": "450",
              "type": "string"
            },
            {
              "value": "500",
              "type": "string"
            },
            {
              "value": "550",
              "type": "string"
            },
            {
              "value": "600",
              "type": "string"
            },
            {
              "value": "650",
              "type": "string"
            },
            {
              "value": "700",
              "type": "string"
            },
            {
              "value": "750",
              "type": "string"
            },
            {
              "value": "800",
              "type": "string"
            },
            {
              "value": "850",
              "type": "string"
            },
            {
              "value": "900",
              "type": "string"
            },
            {
              "value": "950",
              "type": "string"
            },
            {
              "value": "1000",
              "type": "string"
            },
            {
              "value": "1050",
              "type": "string"
            },
            {
              "value": "1100",
              "type": "string"
            },
            {
              "value": "1150",
              "type": "string"
            },
            {
              "value": "1200",
              "type": "string"
            },
            {
              "value": "1250",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "marginTop",
          "type": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
          "complexType": {
            "original": "SpacingValues",
            "resolved": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
            "references": {
              "SpacingValues": {
                "location": "import",
                "path": "../../utils/types/spacing",
                "id": "src/utils/types/spacing.tsx::SpacingValues"
              }
            }
          },
          "mutable": true,
          "attr": "margin-top",
          "reflectToAttr": false,
          "docs": "Adds margin above the heading. The default margin-top for h1 is set to 0,\nwhile for h2 to h6 headings, it's 600.",
          "docsTags": [],
          "values": [
            {
              "value": "0",
              "type": "string"
            },
            {
              "value": "25",
              "type": "string"
            },
            {
              "value": "50",
              "type": "string"
            },
            {
              "value": "75",
              "type": "string"
            },
            {
              "value": "100",
              "type": "string"
            },
            {
              "value": "125",
              "type": "string"
            },
            {
              "value": "150",
              "type": "string"
            },
            {
              "value": "175",
              "type": "string"
            },
            {
              "value": "200",
              "type": "string"
            },
            {
              "value": "225",
              "type": "string"
            },
            {
              "value": "250",
              "type": "string"
            },
            {
              "value": "300",
              "type": "string"
            },
            {
              "value": "350",
              "type": "string"
            },
            {
              "value": "400",
              "type": "string"
            },
            {
              "value": "450",
              "type": "string"
            },
            {
              "value": "500",
              "type": "string"
            },
            {
              "value": "550",
              "type": "string"
            },
            {
              "value": "600",
              "type": "string"
            },
            {
              "value": "650",
              "type": "string"
            },
            {
              "value": "700",
              "type": "string"
            },
            {
              "value": "750",
              "type": "string"
            },
            {
              "value": "800",
              "type": "string"
            },
            {
              "value": "850",
              "type": "string"
            },
            {
              "value": "900",
              "type": "string"
            },
            {
              "value": "950",
              "type": "string"
            },
            {
              "value": "1000",
              "type": "string"
            },
            {
              "value": "1050",
              "type": "string"
            },
            {
              "value": "1100",
              "type": "string"
            },
            {
              "value": "1150",
              "type": "string"
            },
            {
              "value": "1200",
              "type": "string"
            },
            {
              "value": "1250",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "tag",
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "complexType": {
            "original": "'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'",
            "resolved": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
            "references": {}
          },
          "mutable": true,
          "attr": "tag",
          "reflectToAttr": false,
          "docs": "Sets the appropriate HTML tag for the selected level.",
          "docsTags": [],
          "values": [
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            },
            {
              "value": "h6",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the heading content"
        }
      ],
      "parts": [],
      "dependents": [
        "gcds-error-summary",
        "gcds-notice",
        "gcds-stepper"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gcds-error-summary": [
          "gcds-heading"
        ],
        "gcds-notice": [
          "gcds-heading"
        ],
        "gcds-stepper": [
          "gcds-heading"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-hint/gcds-hint.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-hint",
      "readme": "# gcds-hint\n\n\n",
      "docs": "Hint provides additional information or context to help users understand the content or functionality of a related element.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the hint content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "hintId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint-id",
          "reflectToAttr": false,
          "docs": "Id attribute for the hint.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the hint content."
        }
      ],
      "parts": [
        {
          "name": "hint",
          "docs": ""
        }
      ],
      "dependents": [
        "gcds-checkboxes",
        "gcds-date-input",
        "gcds-fieldset",
        "gcds-file-uploader",
        "gcds-input",
        "gcds-radios",
        "gcds-select",
        "gcds-textarea"
      ],
      "dependencies": [
        "gcds-text"
      ],
      "dependencyGraph": {
        "gcds-hint": [
          "gcds-text"
        ],
        "gcds-checkboxes": [
          "gcds-hint"
        ],
        "gcds-date-input": [
          "gcds-hint"
        ],
        "gcds-fieldset": [
          "gcds-hint"
        ],
        "gcds-file-uploader": [
          "gcds-hint"
        ],
        "gcds-input": [
          "gcds-hint"
        ],
        "gcds-radios": [
          "gcds-hint"
        ],
        "gcds-select": [
          "gcds-hint"
        ],
        "gcds-textarea": [
          "gcds-hint"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-icon/gcds-icon.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-icon",
      "readme": "# gcds-icon\n\n\n",
      "docs": "An icon is a symbol that visually represents an action or idea.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Add icon description.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "marginLeft",
          "type": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
          "complexType": {
            "original": "SpacingValues",
            "resolved": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
            "references": {
              "SpacingValues": {
                "location": "import",
                "path": "../../utils/types/spacing",
                "id": "src/utils/types/spacing.tsx::SpacingValues"
              }
            }
          },
          "mutable": false,
          "attr": "margin-left",
          "reflectToAttr": false,
          "docs": "Add margin to the left of the icon",
          "docsTags": [],
          "values": [
            {
              "value": "0",
              "type": "string"
            },
            {
              "value": "25",
              "type": "string"
            },
            {
              "value": "50",
              "type": "string"
            },
            {
              "value": "75",
              "type": "string"
            },
            {
              "value": "100",
              "type": "string"
            },
            {
              "value": "125",
              "type": "string"
            },
            {
              "value": "150",
              "type": "string"
            },
            {
              "value": "175",
              "type": "string"
            },
            {
              "value": "200",
              "type": "string"
            },
            {
              "value": "225",
              "type": "string"
            },
            {
              "value": "250",
              "type": "string"
            },
            {
              "value": "300",
              "type": "string"
            },
            {
              "value": "350",
              "type": "string"
            },
            {
              "value": "400",
              "type": "string"
            },
            {
              "value": "450",
              "type": "string"
            },
            {
              "value": "500",
              "type": "string"
            },
            {
              "value": "550",
              "type": "string"
            },
            {
              "value": "600",
              "type": "string"
            },
            {
              "value": "650",
              "type": "string"
            },
            {
              "value": "700",
              "type": "string"
            },
            {
              "value": "750",
              "type": "string"
            },
            {
              "value": "800",
              "type": "string"
            },
            {
              "value": "850",
              "type": "string"
            },
            {
              "value": "900",
              "type": "string"
            },
            {
              "value": "950",
              "type": "string"
            },
            {
              "value": "1000",
              "type": "string"
            },
            {
              "value": "1050",
              "type": "string"
            },
            {
              "value": "1100",
              "type": "string"
            },
            {
              "value": "1150",
              "type": "string"
            },
            {
              "value": "1200",
              "type": "string"
            },
            {
              "value": "1250",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "marginRight",
          "type": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
          "complexType": {
            "original": "SpacingValues",
            "resolved": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
            "references": {
              "SpacingValues": {
                "location": "import",
                "path": "../../utils/types/spacing",
                "id": "src/utils/types/spacing.tsx::SpacingValues"
              }
            }
          },
          "mutable": false,
          "attr": "margin-right",
          "reflectToAttr": false,
          "docs": "Add margin to the right of the icon",
          "docsTags": [],
          "values": [
            {
              "value": "0",
              "type": "string"
            },
            {
              "value": "25",
              "type": "string"
            },
            {
              "value": "50",
              "type": "string"
            },
            {
              "value": "75",
              "type": "string"
            },
            {
              "value": "100",
              "type": "string"
            },
            {
              "value": "125",
              "type": "string"
            },
            {
              "value": "150",
              "type": "string"
            },
            {
              "value": "175",
              "type": "string"
            },
            {
              "value": "200",
              "type": "string"
            },
            {
              "value": "225",
              "type": "string"
            },
            {
              "value": "250",
              "type": "string"
            },
            {
              "value": "300",
              "type": "string"
            },
            {
              "value": "350",
              "type": "string"
            },
            {
              "value": "400",
              "type": "string"
            },
            {
              "value": "450",
              "type": "string"
            },
            {
              "value": "500",
              "type": "string"
            },
            {
              "value": "550",
              "type": "string"
            },
            {
              "value": "600",
              "type": "string"
            },
            {
              "value": "650",
              "type": "string"
            },
            {
              "value": "700",
              "type": "string"
            },
            {
              "value": "750",
              "type": "string"
            },
            {
              "value": "800",
              "type": "string"
            },
            {
              "value": "850",
              "type": "string"
            },
            {
              "value": "900",
              "type": "string"
            },
            {
              "value": "950",
              "type": "string"
            },
            {
              "value": "1000",
              "type": "string"
            },
            {
              "value": "1050",
              "type": "string"
            },
            {
              "value": "1100",
              "type": "string"
            },
            {
              "value": "1150",
              "type": "string"
            },
            {
              "value": "1200",
              "type": "string"
            },
            {
              "value": "1250",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "\"checkmark-circle\" | \"chevron-down\" | \"chevron-left\" | \"chevron-right\" | \"chevron-up\" | \"close\" | \"download\" | \"email\" | \"exclamation-circle\" | \"external\" | \"info-circle\" | \"phone\" | \"search\" | \"warning-triangle\"",
          "complexType": {
            "original": "| 'checkmark-circle'\n    | 'chevron-down'\n    | 'chevron-left'\n    | 'chevron-right'\n    | 'chevron-up'\n    | 'close'\n    | 'download'\n    | 'email'\n    | 'exclamation-circle'\n    | 'external'\n    | 'info-circle'\n    | 'phone'\n    | 'search'\n    | 'warning-triangle'",
            "resolved": "\"checkmark-circle\" | \"chevron-down\" | \"chevron-left\" | \"chevron-right\" | \"chevron-up\" | \"close\" | \"download\" | \"email\" | \"exclamation-circle\" | \"external\" | \"info-circle\" | \"phone\" | \"search\" | \"warning-triangle\"",
            "references": {}
          },
          "mutable": true,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the icon.",
          "docsTags": [],
          "values": [
            {
              "value": "checkmark-circle",
              "type": "string"
            },
            {
              "value": "chevron-down",
              "type": "string"
            },
            {
              "value": "chevron-left",
              "type": "string"
            },
            {
              "value": "chevron-right",
              "type": "string"
            },
            {
              "value": "chevron-up",
              "type": "string"
            },
            {
              "value": "close",
              "type": "string"
            },
            {
              "value": "download",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "exclamation-circle",
              "type": "string"
            },
            {
              "value": "external",
              "type": "string"
            },
            {
              "value": "info-circle",
              "type": "string"
            },
            {
              "value": "phone",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "warning-triangle",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"inherit\" | \"text\" | \"text-small\"",
          "complexType": {
            "original": "| 'inherit'\n    | 'text-small'\n    | 'text'\n    | 'h6'\n    | 'h5'\n    | 'h4'\n    | 'h3'\n    | 'h2'\n    | 'h1'",
            "resolved": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"inherit\" | \"text\" | \"text-small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Defines the size of the icon.",
          "docsTags": [
            {
              "name": "default",
              "text": "'inherit'"
            }
          ],
          "default": "'inherit'",
          "values": [
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            },
            {
              "value": "h6",
              "type": "string"
            },
            {
              "value": "inherit",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "text-small",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gcds-alert",
        "gcds-button",
        "gcds-error-message",
        "gcds-file-uploader",
        "gcds-link",
        "gcds-nav-group",
        "gcds-notice",
        "gcds-pagination",
        "gcds-search",
        "gcds-topic-menu"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gcds-alert": [
          "gcds-icon"
        ],
        "gcds-button": [
          "gcds-icon"
        ],
        "gcds-error-message": [
          "gcds-icon"
        ],
        "gcds-file-uploader": [
          "gcds-icon"
        ],
        "gcds-link": [
          "gcds-icon"
        ],
        "gcds-nav-group": [
          "gcds-icon"
        ],
        "gcds-notice": [
          "gcds-icon"
        ],
        "gcds-pagination": [
          "gcds-icon"
        ],
        "gcds-search": [
          "gcds-icon"
        ],
        "gcds-topic-menu": [
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-input/gcds-input.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-input",
      "readme": "# gcds-input\n\n\n",
      "docs": "An input is a space to enter short-form information in response to a question or instruction.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autocomplete",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "String to have autocomplete enabled.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": true,
          "docs": "If true, the input will be focused on component render",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Specifies if an input element is disabled or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "errorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-message",
          "reflectToAttr": false,
          "docs": "Error message for an invalid input element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "form",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "form",
          "reflectToAttr": true,
          "docs": "The ID of the form that the input field belongs to.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-label",
          "reflectToAttr": false,
          "docs": "Specifies if the label is hidden or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "Hint displayed below the label and above the input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "Id  attribute for an input element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Form field label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "max",
          "type": "number | string",
          "complexType": {
            "original": "number | string",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "The maximum value that the input field can accept.\nOnly applies to number input type.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": true,
          "docs": "The maximum number of characters that the input field can accept.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "min",
          "type": "number | string",
          "complexType": {
            "original": "number | string",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "The minimum value that the input field can accept.\nOnly applies to number input type.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "minlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": true,
          "docs": "The minimum number of characters that the input field can accept.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name attribute for an input element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "pattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": true,
          "docs": "Specifies a regular expression the form control's value should match.\nSee: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If true, the input field cannot be modified.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies if a form field is required or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size attribute for an input element to provide a visual indication\nof the expected text length to the user.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "step",
          "type": "\"any\" | number",
          "complexType": {
            "original": "number | 'any'",
            "resolved": "\"any\" | number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "A number that specifies the granularity that the value must adhere to.\nValid for number type.\nSee: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step",
          "docsTags": [],
          "values": [
            {
              "value": "any",
              "type": "string"
            },
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"email\" | \"number\" | \"password\" | \"search\" | \"text\" | \"url\"",
          "complexType": {
            "original": "'email' | 'number' | 'password' | 'search' | 'text' | 'url'",
            "resolved": "\"email\" | \"number\" | \"password\" | \"search\" | \"text\" | \"url\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Set Input types",
          "docsTags": [
            {
              "name": "default",
              "text": "'text'"
            }
          ],
          "default": "'text'",
          "values": [
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validateOn",
          "type": "\"blur\" | \"other\" | \"submit\"",
          "complexType": {
            "original": "'blur' | 'submit' | 'other'",
            "resolved": "\"blur\" | \"other\" | \"submit\"",
            "references": {}
          },
          "mutable": true,
          "attr": "validate-on",
          "reflectToAttr": false,
          "docs": "Set event to call validator",
          "docsTags": [
            {
              "name": "default",
              "text": "'blur'"
            }
          ],
          "default": "'blur'",
          "values": [
            {
              "value": "blur",
              "type": "string"
            },
            {
              "value": "other",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validator",
          "type": "(string | ValidatorEntry | Validator<string>)[]",
          "complexType": {
            "original": "Array<\n    string | ValidatorEntry | Validator<string>\n  >",
            "resolved": "(string | ValidatorEntry | Validator<string>)[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "ValidatorEntry": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::ValidatorEntry"
              },
              "Validator": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::Validator"
              }
            }
          },
          "mutable": true,
          "attr": "validator",
          "reflectToAttr": false,
          "docs": "Array of validators",
          "docsTags": [],
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "ValidatorEntry"
            },
            {
              "type": "Validator<string>)[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validity",
          "type": "ValidityState",
          "complexType": {
            "original": "ValidityState",
            "resolved": "ValidityState",
            "references": {
              "ValidityState": {
                "location": "global",
                "id": "global::ValidityState"
              }
            }
          },
          "mutable": false,
          "attr": "validity",
          "reflectToAttr": false,
          "docs": "Read-only property of the input, returns a ValidityState object that represents the validity states this element is in.",
          "docsTags": [
            {
              "name": "readonly",
              "text": ""
            }
          ],
          "values": [
            {
              "type": "ValidityState"
            }
          ],
          "optional": false,
          "required": false,
          "getter": true,
          "setter": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default value for an input element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "checkValidity",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "checkValidity() => Promise<boolean>",
          "parameters": [],
          "docs": "Check the validity of gcds-input",
          "docsTags": []
        },
        {
          "name": "getValidationMessage",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getValidationMessage() => Promise<string>",
          "parameters": [],
          "docs": "Get validationMessage of gcds-input",
          "docsTags": []
        },
        {
          "name": "validate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLGcdsInputElement": {
                "location": "global",
                "id": "global::HTMLGcdsInputElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "validate() => Promise<void>",
          "parameters": [],
          "docs": "Call any active validators",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has changed.",
          "docsTags": []
        },
        {
          "event": "gcdsError",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has a validation error.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "gcdsInput",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the element has received input.",
          "docsTags": []
        },
        {
          "event": "gcdsValid",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has a validation error.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "submit",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gcds-date-input"
      ],
      "dependencies": [
        "gcds-label",
        "gcds-hint",
        "gcds-error-message"
      ],
      "dependencyGraph": {
        "gcds-input": [
          "gcds-label",
          "gcds-hint",
          "gcds-error-message"
        ],
        "gcds-hint": [
          "gcds-text"
        ],
        "gcds-error-message": [
          "gcds-text",
          "gcds-icon"
        ],
        "gcds-date-input": [
          "gcds-input"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-label/gcds-label.tsx",
      "encapsulation": "none",
      "tag": "gcds-label",
      "readme": "# gcds-label\n\n\n",
      "docs": "Label for form fields, providing accessibility and context for users.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Slot for the label content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "hideLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-label",
          "reflectToAttr": false,
          "docs": "Specifies if the label is hidden or not.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Form field label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "labelFor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label-for",
          "reflectToAttr": false,
          "docs": "Defines the label's for attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies if a form field is required or not.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Slot for the label content."
        }
      ],
      "parts": [],
      "dependents": [
        "gcds-checkboxes",
        "gcds-file-uploader",
        "gcds-input",
        "gcds-radios",
        "gcds-search",
        "gcds-select",
        "gcds-textarea"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gcds-checkboxes": [
          "gcds-label"
        ],
        "gcds-file-uploader": [
          "gcds-label"
        ],
        "gcds-input": [
          "gcds-label"
        ],
        "gcds-radios": [
          "gcds-label"
        ],
        "gcds-search": [
          "gcds-label"
        ],
        "gcds-select": [
          "gcds-label"
        ],
        "gcds-textarea": [
          "gcds-label"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-lang-toggle/gcds-lang-toggle.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-lang-toggle",
      "readme": "# gcds-lang-toggle\n",
      "docs": "The language toggle is a link to the same content in the other Official Language.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "The href attribute specifies the URL of the opposite language page",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has been clicked. Contains the href in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gcds-header"
      ],
      "dependencies": [
        "gcds-sr-only",
        "gcds-link"
      ],
      "dependencyGraph": {
        "gcds-lang-toggle": [
          "gcds-sr-only",
          "gcds-link"
        ],
        "gcds-link": [
          "gcds-icon"
        ],
        "gcds-header": [
          "gcds-lang-toggle"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-link/gcds-link.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-link",
      "readme": "# gcds-link\n\n\n",
      "docs": "A link is a navigational element that brings a person to a new page, website, file, or section on the current page.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the link content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "display",
          "type": "\"block\" | \"inline\"",
          "complexType": {
            "original": "'block' | 'inline'",
            "resolved": "\"block\" | \"inline\"",
            "references": {}
          },
          "mutable": true,
          "attr": "display",
          "reflectToAttr": false,
          "docs": "Sets the display behavior of the link",
          "docsTags": [
            {
              "name": "default",
              "text": "'inline'"
            }
          ],
          "default": "'inline'",
          "values": [
            {
              "value": "block",
              "type": "string"
            },
            {
              "value": "inline",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "download",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "The download attribute specifies that the target (the file specified in the href attribute) will be downloaded when a user clicks on the hyperlink",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "external",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "external",
          "reflectToAttr": false,
          "docs": "Whether the link is external or not",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "The href attribute specifies the URL of the page the link goes to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "rel",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "The rel attribute specifies the relationship between the current document and the linked document",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"inherit\" | \"regular\" | \"small\"",
          "complexType": {
            "original": "'regular' | 'small' | 'inherit'",
            "resolved": "\"inherit\" | \"regular\" | \"small\"",
            "references": {}
          },
          "mutable": true,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Set the link size",
          "docsTags": [
            {
              "name": "default",
              "text": "'inherit'"
            }
          ],
          "default": "'inherit'",
          "values": [
            {
              "value": "inherit",
              "type": "string"
            },
            {
              "value": "regular",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "The target attribute specifies where to open the linked document",
          "docsTags": [
            {
              "name": "default",
              "text": "'_self'"
            }
          ],
          "default": "'_self'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type specifies the media type of the linked document",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"default\" | \"light\"",
          "complexType": {
            "original": "'default' | 'light'",
            "resolved": "\"default\" | \"light\"",
            "references": {}
          },
          "mutable": true,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Sets the main style of the link.",
          "docsTags": [
            {
              "name": "default",
              "text": "'default'"
            }
          ],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has been clicked. Contains the href in the event detail.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the link content."
        }
      ],
      "parts": [],
      "dependents": [
        "gcds-breadcrumbs-item",
        "gcds-card",
        "gcds-error-summary",
        "gcds-footer",
        "gcds-header",
        "gcds-lang-toggle"
      ],
      "dependencies": [
        "gcds-icon"
      ],
      "dependencyGraph": {
        "gcds-link": [
          "gcds-icon"
        ],
        "gcds-breadcrumbs-item": [
          "gcds-link"
        ],
        "gcds-card": [
          "gcds-link"
        ],
        "gcds-error-summary": [
          "gcds-link"
        ],
        "gcds-footer": [
          "gcds-link"
        ],
        "gcds-header": [
          "gcds-link"
        ],
        "gcds-lang-toggle": [
          "gcds-link"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-nav-group/gcds-nav-group.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-nav-group",
      "readme": "# gcds-nav-group\n\n\n",
      "docs": "Navigational group with expandable or dropdown functionality, allowing for better organization of navigation links.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the list of navigation links."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "closeTrigger",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "close-trigger",
          "reflectToAttr": true,
          "docs": "Label for the expanded button trigger",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "menuLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "menu-label",
          "reflectToAttr": true,
          "docs": "Label for the nav group menu",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Has the nav group been expanded",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "openTrigger",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "open-trigger",
          "reflectToAttr": true,
          "docs": "Label for the collapsed button trigger",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "focusTrigger",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "focusTrigger() => Promise<void>",
          "parameters": [],
          "docs": "Focus button element",
          "docsTags": []
        },
        {
          "name": "toggleNav",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLGcdsNavGroupElement": {
                "location": "global",
                "id": "global::HTMLGcdsNavGroupElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "toggleNav() => Promise<void>",
          "parameters": [],
          "docs": "Toggle the nav open or closed",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button blurs.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button has been clicked.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button has been focus.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "focusout",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the list of navigation links."
        }
      ],
      "parts": [],
      "dependents": [
        "gcds-side-nav",
        "gcds-top-nav"
      ],
      "dependencies": [
        "gcds-icon"
      ],
      "dependencyGraph": {
        "gcds-nav-group": [
          "gcds-icon"
        ],
        "gcds-side-nav": [
          "gcds-nav-group"
        ],
        "gcds-top-nav": [
          "gcds-nav-group"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-nav-link/gcds-nav-link.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-nav-link",
      "readme": "# gcds-nav-link\n\n\n",
      "docs": "Navigation link within a navigation group or menu, allowing users to navigate to different sections of a website or application.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the navigation link content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "current",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "current",
          "reflectToAttr": true,
          "docs": "Current page flag",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Link href",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "focusLink",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "focusLink() => Promise<void>",
          "parameters": [],
          "docs": "Focus the link element",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has been clicked.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the navigation link content."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/gcds-notice/gcds-notice.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-notice",
      "readme": "# gcds-notice\n\n\n",
      "docs": "The notice is a short, prominent message that’s part of the page content.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the main content of the notice."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "noticeTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "notice-title",
          "reflectToAttr": false,
          "docs": "Set the notice title.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "noticeTitleTag",
          "type": "\"h2\" | \"h3\" | \"h4\" | \"h5\"",
          "complexType": {
            "original": "'h2' | 'h3' | 'h4' | 'h5'",
            "resolved": "\"h2\" | \"h3\" | \"h4\" | \"h5\"",
            "references": {}
          },
          "mutable": false,
          "attr": "notice-title-tag",
          "reflectToAttr": false,
          "docs": "The notice title tag property specifies the HTML heading element for the title.\nThis property does not modify the font size. It is used to assign the heading level\nin order to maintain heading hierarchy and accessibility for assistive technologies.",
          "docsTags": [],
          "values": [
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'danger' | 'info' | 'success' | 'warning'",
            "resolved": "\"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Set notice type.",
          "docsTags": [],
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the main content of the notice."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-icon",
        "gcds-heading",
        "gcds-sr-only"
      ],
      "dependencyGraph": {
        "gcds-notice": [
          "gcds-icon",
          "gcds-heading",
          "gcds-sr-only"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-pagination/gcds-pagination.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-pagination",
      "readme": "# gcds-pagination\n\n\n",
      "docs": "Pagination is a division of content into multiple linked pages.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "current-page",
          "reflectToAttr": true,
          "docs": "List display - Current page number",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "display",
          "type": "\"list\" | \"simple\"",
          "complexType": {
            "original": "'list' | 'simple'",
            "resolved": "\"list\" | \"simple\"",
            "references": {}
          },
          "mutable": false,
          "attr": "display",
          "reflectToAttr": false,
          "docs": "Navigation element label",
          "docsTags": [
            {
              "name": "default",
              "text": "'list'"
            }
          ],
          "default": "'list'",
          "values": [
            {
              "value": "list",
              "type": "string"
            },
            {
              "value": "simple",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Navigation element label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "nextHref",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "next-href",
          "reflectToAttr": false,
          "docs": "Simple display - href for next link",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "nextLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "next-label",
          "reflectToAttr": true,
          "docs": "Simple display - lable for next link",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "previousHref",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "previous-href",
          "reflectToAttr": false,
          "docs": "Simple display - href for previous link",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "previousLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "previous-label",
          "reflectToAttr": true,
          "docs": "Simple display - label for previous link",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "totalPages",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "total-pages",
          "reflectToAttr": false,
          "docs": "List display - Total number of pages",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "url",
          "type": "object | string",
          "complexType": {
            "original": "string | object",
            "resolved": "object | string",
            "references": {}
          },
          "mutable": false,
          "attr": "url",
          "reflectToAttr": false,
          "docs": "List display - URL object to create query strings and fragment on links",
          "docsTags": [],
          "values": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsClick",
          "detail": "object | string",
          "bubbles": true,
          "complexType": {
            "original": "object | string",
            "resolved": "object | string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has been clicked. Contains the href in event detail when using simple display,\nor an object with page and href when using list display.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-icon"
      ],
      "dependencyGraph": {
        "gcds-pagination": [
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-phase-banner/gcds-phase-banner.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-phase-banner",
      "readme": "# gcds-phase-banner\n\n\n",
      "docs": "Phase banner displays a banner indicating the current phase of a project or feature, with optional icons and call-to-action elements.",
      "docsTags": [
        {
          "name": "slot",
          "text": "banner-cta - Slot for the call-to-action element in the banner."
        },
        {
          "name": "slot",
          "text": "banner-icon-left - Slot for displaying an icon/image on the left of the banner."
        },
        {
          "name": "slot",
          "text": "banner-icon-right - Slot for displaying an icon/image on the right of the banner."
        },
        {
          "name": "slot",
          "text": "banner-text - Slot for the main content of the banner."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "bannerRole",
          "type": "\"primary\" | \"secondary\"",
          "complexType": {
            "original": "'primary' | 'secondary'",
            "resolved": "\"primary\" | \"secondary\"",
            "references": {}
          },
          "mutable": false,
          "attr": "banner-role",
          "reflectToAttr": false,
          "docs": "Defines banner role.",
          "docsTags": [
            {
              "name": "default",
              "text": "'primary'"
            }
          ],
          "default": "'primary'",
          "values": [
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "container",
          "type": "\"full\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
          "complexType": {
            "original": "'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs'",
            "resolved": "\"full\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
            "references": {}
          },
          "mutable": false,
          "attr": "container",
          "reflectToAttr": false,
          "docs": "Defines the container width of the phase banner content",
          "docsTags": [
            {
              "name": "default",
              "text": "'xl'"
            }
          ],
          "default": "'xl'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "isFixed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-fixed",
          "reflectToAttr": false,
          "docs": "Defines if the banner's position is fixed.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "banner-cta",
          "docs": "Slot for the call-to-action element in the banner."
        },
        {
          "name": "banner-icon-left",
          "docs": "Slot for displaying an icon/image on the left of the banner."
        },
        {
          "name": "banner-icon-right",
          "docs": "Slot for displaying an icon/image on the right of the banner."
        },
        {
          "name": "banner-text",
          "docs": "Slot for the main content of the banner."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-container"
      ],
      "dependencyGraph": {
        "gcds-phase-banner": [
          "gcds-container"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-radios/gcds-radios.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-radios",
      "readme": "# gcds-radio\n\n\n",
      "docs": "Radios provide a set of options for a single response.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Specifies if an input element is disabled or not.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "errorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-message",
          "reflectToAttr": false,
          "docs": "Set this to display an error message for invalid radios",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": true,
          "docs": "Hint displayed below the label and above the radio elements",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "legend",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "legend",
          "reflectToAttr": true,
          "docs": "Label or legend for the group of radio elements",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The `name` attribute for the radios, used to group radio elements together",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "options",
          "type": "RadioObject[] | string",
          "complexType": {
            "original": "string | Array<RadioObject>",
            "resolved": "RadioObject[] | string",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "RadioObject": {
                "location": "import",
                "path": "./radio",
                "id": "src/components/gcds-radios/radio.tsx::RadioObject"
              }
            }
          },
          "mutable": true,
          "attr": "options",
          "reflectToAttr": false,
          "docs": "Options to render radio buttons",
          "docsTags": [],
          "values": [
            {
              "type": "RadioObject[]"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Specifies if a form field is required or not.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validateOn",
          "type": "\"blur\" | \"other\" | \"submit\"",
          "complexType": {
            "original": "'blur' | 'submit' | 'other'",
            "resolved": "\"blur\" | \"other\" | \"submit\"",
            "references": {}
          },
          "mutable": true,
          "attr": "validate-on",
          "reflectToAttr": false,
          "docs": "Set event to call validator",
          "docsTags": [
            {
              "name": "default",
              "text": "'blur'"
            }
          ],
          "default": "'blur'",
          "values": [
            {
              "value": "blur",
              "type": "string"
            },
            {
              "value": "other",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validator",
          "type": "(string | ValidatorEntry | Validator<string>)[]",
          "complexType": {
            "original": "Array<\n    string | ValidatorEntry | Validator<string>\n  >",
            "resolved": "(string | ValidatorEntry | Validator<string>)[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "ValidatorEntry": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::ValidatorEntry"
              },
              "Validator": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::Validator"
              }
            }
          },
          "mutable": true,
          "attr": "validator",
          "reflectToAttr": false,
          "docs": "Array of validators",
          "docsTags": [],
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "ValidatorEntry"
            },
            {
              "type": "Validator<string>)[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Default value for the element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "validate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLGcdsRadiosElement": {
                "location": "global",
                "id": "global::HTMLGcdsRadiosElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "validate() => Promise<void>",
          "parameters": [],
          "docs": "Call any active validators",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the radios has lost focus",
          "docsTags": []
        },
        {
          "event": "gcdsChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a radios option is checked (but not when unchecked). Contains new value in event detail",
          "docsTags": []
        },
        {
          "event": "gcdsError",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when radios has a validation error",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when radios has received focus",
          "docsTags": []
        },
        {
          "event": "gcdsInput",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when radios has been changed as a direct result of a user action (a radio option has been selected). Contains new value in event detail",
          "docsTags": []
        },
        {
          "event": "gcdsValid",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when radios has passed validation",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "submit",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-hint",
        "gcds-error-message",
        "gcds-label"
      ],
      "dependencyGraph": {
        "gcds-radios": [
          "gcds-hint",
          "gcds-error-message",
          "gcds-label"
        ],
        "gcds-hint": [
          "gcds-text"
        ],
        "gcds-error-message": [
          "gcds-text",
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-search/gcds-search.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-search",
      "readme": "# gcds-search\n\n\n",
      "docs": "Search is a space for entering keywords to find relevant information.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "action",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "action",
          "reflectToAttr": false,
          "docs": "Sets the action for the search form. Default will be canada.ca global search",
          "docsTags": [
            {
              "name": "default",
              "text": "'/sr/srb.html'"
            }
          ],
          "default": "'/sr/srb.html'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "method",
          "type": "\"get\" | \"post\"",
          "complexType": {
            "original": "'get' | 'post'",
            "resolved": "\"get\" | \"post\"",
            "references": {}
          },
          "mutable": false,
          "attr": "method",
          "reflectToAttr": false,
          "docs": "Set the form method of the search form",
          "docsTags": [
            {
              "name": "default",
              "text": "'get'"
            }
          ],
          "default": "'get'",
          "values": [
            {
              "value": "get",
              "type": "string"
            },
            {
              "value": "post",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Set the name of the search input",
          "docsTags": [
            {
              "name": "default",
              "text": "'q'"
            }
          ],
          "default": "'q'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Set the placeholder and label for the search input. Becomes \"Search [placeholder]\"",
          "docsTags": [
            {
              "name": "default",
              "text": "'Canada.ca'"
            }
          ],
          "default": "'Canada.ca'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "searchId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "search-id",
          "reflectToAttr": false,
          "docs": "Set the id of the search input",
          "docsTags": [
            {
              "name": "default",
              "text": "'search'"
            }
          ],
          "default": "'search'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "suggested",
          "type": "string[]",
          "complexType": {
            "original": "Array<string>",
            "resolved": "string[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "attr": "suggested",
          "reflectToAttr": false,
          "docs": "Set a list of predefined search terms",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Set the value of the search input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the search input has lost focus.",
          "docsTags": []
        },
        {
          "event": "gcdsChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the search input value has changed.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the search input has gained focus.",
          "docsTags": []
        },
        {
          "event": "gcdsInput",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the search element has received input.",
          "docsTags": []
        },
        {
          "event": "gcdsSubmit",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the search form has submitted.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-sr-only",
        "gcds-label",
        "gcds-button",
        "gcds-icon"
      ],
      "dependencyGraph": {
        "gcds-search": [
          "gcds-sr-only",
          "gcds-label",
          "gcds-button",
          "gcds-icon"
        ],
        "gcds-button": [
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-select/gcds-select.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-select",
      "readme": "# gcds-select\n\n\n",
      "docs": "A select provides a large list of options for single selection.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for options and option groups."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "defaultValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "default-value",
          "reflectToAttr": true,
          "docs": "The default value is an optional value that gets displayed before the user selects an option.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Specifies if a select element is disabled or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "errorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-message",
          "reflectToAttr": true,
          "docs": "Error message for an invalid select element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": true,
          "docs": "Hint displayed below the label.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "Form field label.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Name attribute for select form element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Specifies if a form field is required or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "selectId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "select-id",
          "reflectToAttr": true,
          "docs": "Id attribute for a select element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "validateOn",
          "type": "\"blur\" | \"other\" | \"submit\"",
          "complexType": {
            "original": "'blur' | 'submit' | 'other'",
            "resolved": "\"blur\" | \"other\" | \"submit\"",
            "references": {}
          },
          "mutable": true,
          "attr": "validate-on",
          "reflectToAttr": false,
          "docs": "Set event to call validator",
          "docsTags": [
            {
              "name": "default",
              "text": "'blur'"
            }
          ],
          "default": "'blur'",
          "values": [
            {
              "value": "blur",
              "type": "string"
            },
            {
              "value": "other",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validator",
          "type": "(string | ValidatorEntry | Validator<string>)[]",
          "complexType": {
            "original": "Array<\n    string | ValidatorEntry | Validator<string>\n  >",
            "resolved": "(string | ValidatorEntry | Validator<string>)[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "ValidatorEntry": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::ValidatorEntry"
              },
              "Validator": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::Validator"
              }
            }
          },
          "mutable": true,
          "attr": "validator",
          "reflectToAttr": false,
          "docs": "Array of validators",
          "docsTags": [],
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "ValidatorEntry"
            },
            {
              "type": "Validator<string>)[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value for a select element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "validate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLGcdsSelectElement": {
                "location": "global",
                "id": "global::HTMLGcdsSelectElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "validate() => Promise<void>",
          "parameters": [],
          "docs": "Call any active validators",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the select loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the select value has changed.",
          "docsTags": []
        },
        {
          "event": "gcdsError",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the select has a validation error.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the select has focus.",
          "docsTags": []
        },
        {
          "event": "gcdsInput",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the select has received input.",
          "docsTags": []
        },
        {
          "event": "gcdsValid",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the select has a validation error.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "submit",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for options and option groups."
        }
      ],
      "parts": [],
      "dependents": [
        "gcds-date-input"
      ],
      "dependencies": [
        "gcds-label",
        "gcds-hint",
        "gcds-error-message"
      ],
      "dependencyGraph": {
        "gcds-select": [
          "gcds-label",
          "gcds-hint",
          "gcds-error-message"
        ],
        "gcds-hint": [
          "gcds-text"
        ],
        "gcds-error-message": [
          "gcds-text",
          "gcds-icon"
        ],
        "gcds-date-input": [
          "gcds-select"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-side-nav/gcds-side-nav.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-side-nav",
      "readme": "# gcds-side-nav\n\n\n",
      "docs": "A side navigation is a vertical list of page links on the left side of the screen.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the navigation groups and navigation links."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for navigation landmark",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "getNavSize",
          "returns": {
            "type": "Promise<\"desktop\" | \"mobile\">",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<\"desktop\" | \"mobile\">",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<\"desktop\" | \"mobile\">"
          },
          "signature": "getNavSize() => Promise<\"desktop\" | \"mobile\">",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "updateNavItemQueue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(el: any, includeElement?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "el",
                "type": "any",
                "docs": ""
              },
              {
                "name": "includeElement",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateNavItemQueue(el: any, includeElement?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "el",
              "type": "any",
              "docs": ""
            },
            {
              "name": "includeElement",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "updateNavSize",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(size: any) => Promise<void>",
            "parameters": [
              {
                "name": "size",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateNavSize(size: any) => Promise<void>",
          "parameters": [
            {
              "name": "size",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "focusin",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "gcdsClick",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the navigation groups and navigation links."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-nav-group"
      ],
      "dependencyGraph": {
        "gcds-side-nav": [
          "gcds-nav-group"
        ],
        "gcds-nav-group": [
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-signature/gcds-signature.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-signature",
      "readme": "# gcds-signature\n\n\n",
      "docs": "The signature is the Government of Canada landmark identifier found in the header or footer.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "hasLink",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "has-link",
          "reflectToAttr": false,
          "docs": "Has link to canada.ca. Only applies to signature",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"signature\" | \"wordmark\"",
          "complexType": {
            "original": "'signature' | 'wordmark'",
            "resolved": "\"signature\" | \"wordmark\"",
            "references": {}
          },
          "mutable": true,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "The type of graphic to render",
          "docsTags": [
            {
              "name": "default",
              "text": "'signature'"
            }
          ],
          "default": "'signature'",
          "values": [
            {
              "value": "signature",
              "type": "string"
            },
            {
              "value": "wordmark",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"colour\" | \"white\"",
          "complexType": {
            "original": "'colour' | 'white'",
            "resolved": "\"colour\" | \"white\"",
            "references": {}
          },
          "mutable": true,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "The colour variant to render",
          "docsTags": [
            {
              "name": "default",
              "text": "'colour'"
            }
          ],
          "default": "'colour'",
          "values": [
            {
              "value": "colour",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gcds-footer",
        "gcds-header"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gcds-footer": [
          "gcds-signature"
        ],
        "gcds-header": [
          "gcds-signature"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-sr-only/gcds-sr-only.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-sr-only",
      "readme": "# gcds-sr-only\n\n\n",
      "docs": "The screenreader-only component is text information only accessible with assistive technologies.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the hidden accessible content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "tag",
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"p\" | \"span\"",
          "complexType": {
            "original": "| 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6'\n    | 'p'\n    | 'span'",
            "resolved": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"p\" | \"span\"",
            "references": {}
          },
          "mutable": true,
          "attr": "tag",
          "reflectToAttr": false,
          "docs": "Sets the appropriate HTML tag for the content.",
          "docsTags": [
            {
              "name": "default",
              "text": "'p'"
            }
          ],
          "default": "'p'",
          "values": [
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            },
            {
              "value": "h6",
              "type": "string"
            },
            {
              "value": "p",
              "type": "string"
            },
            {
              "value": "span",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the hidden accessible content."
        }
      ],
      "parts": [],
      "dependents": [
        "gcds-card",
        "gcds-file-uploader",
        "gcds-footer",
        "gcds-lang-toggle",
        "gcds-notice",
        "gcds-search",
        "gcds-stepper",
        "gcds-topic-menu"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gcds-card": [
          "gcds-sr-only"
        ],
        "gcds-file-uploader": [
          "gcds-sr-only"
        ],
        "gcds-footer": [
          "gcds-sr-only"
        ],
        "gcds-lang-toggle": [
          "gcds-sr-only"
        ],
        "gcds-notice": [
          "gcds-sr-only"
        ],
        "gcds-search": [
          "gcds-sr-only"
        ],
        "gcds-stepper": [
          "gcds-sr-only"
        ],
        "gcds-topic-menu": [
          "gcds-sr-only"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-stepper/gcds-stepper.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-stepper",
      "readme": "# gcds-stepper\n\n\n",
      "docs": "A stepper is a progress tracker for a multi-step process.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the heading content."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "currentStep",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "current-step",
          "reflectToAttr": false,
          "docs": "Defines the current step.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "tag",
          "type": "\"h1\" | \"h2\" | \"h3\"",
          "complexType": {
            "original": "'h1' | 'h2' | 'h3'",
            "resolved": "\"h1\" | \"h2\" | \"h3\"",
            "references": {}
          },
          "mutable": false,
          "attr": "tag",
          "reflectToAttr": false,
          "docs": "Defines the heading tag to render",
          "docsTags": [
            {
              "name": "default",
              "text": "'h2'"
            }
          ],
          "default": "'h2'",
          "values": [
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "totalSteps",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "total-steps",
          "reflectToAttr": false,
          "docs": "Defines the total amount of steps.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the heading content."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-heading",
        "gcds-sr-only"
      ],
      "dependencyGraph": {
        "gcds-stepper": [
          "gcds-heading",
          "gcds-sr-only"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-text/gcds-text.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-text",
      "readme": "# gcds-text\n\n\n",
      "docs": "Text is a styled and formatted paragraph that displays written content in an accessible way and matches Canada.ca typography styles.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the content of the text element."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "characterLimit",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "character-limit",
          "reflectToAttr": false,
          "docs": "Sets the line length to a maximum amount of characters per line to ensure a comfortable, accessible reading length.",
          "docsTags": [
            {
              "name": "default",
              "text": "true"
            }
          ],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "display",
          "type": "\"block\" | \"flex\" | \"inline\" | \"inline-block\" | \"inline-flex\" | \"none\"",
          "complexType": {
            "original": "| 'block'\n    | 'flex'\n    | 'inline'\n    | 'inline-block'\n    | 'inline-flex'\n    | 'none'",
            "resolved": "\"block\" | \"flex\" | \"inline\" | \"inline-block\" | \"inline-flex\" | \"none\"",
            "references": {}
          },
          "mutable": true,
          "attr": "display",
          "reflectToAttr": false,
          "docs": "Specifies the display behaviour of the text.",
          "docsTags": [
            {
              "name": "default",
              "text": "'block'"
            }
          ],
          "default": "'block'",
          "values": [
            {
              "value": "block",
              "type": "string"
            },
            {
              "value": "flex",
              "type": "string"
            },
            {
              "value": "inline",
              "type": "string"
            },
            {
              "value": "inline-block",
              "type": "string"
            },
            {
              "value": "inline-flex",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "marginBottom",
          "type": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
          "complexType": {
            "original": "SpacingValues",
            "resolved": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
            "references": {
              "SpacingValues": {
                "location": "import",
                "path": "../../utils/types/spacing",
                "id": "src/utils/types/spacing.tsx::SpacingValues"
              }
            }
          },
          "mutable": true,
          "attr": "margin-bottom",
          "reflectToAttr": false,
          "docs": "Adds margin below the text.",
          "docsTags": [
            {
              "name": "default",
              "text": "'300'"
            }
          ],
          "default": "'300'",
          "values": [
            {
              "value": "0",
              "type": "string"
            },
            {
              "value": "25",
              "type": "string"
            },
            {
              "value": "50",
              "type": "string"
            },
            {
              "value": "75",
              "type": "string"
            },
            {
              "value": "100",
              "type": "string"
            },
            {
              "value": "125",
              "type": "string"
            },
            {
              "value": "150",
              "type": "string"
            },
            {
              "value": "175",
              "type": "string"
            },
            {
              "value": "200",
              "type": "string"
            },
            {
              "value": "225",
              "type": "string"
            },
            {
              "value": "250",
              "type": "string"
            },
            {
              "value": "300",
              "type": "string"
            },
            {
              "value": "350",
              "type": "string"
            },
            {
              "value": "400",
              "type": "string"
            },
            {
              "value": "450",
              "type": "string"
            },
            {
              "value": "500",
              "type": "string"
            },
            {
              "value": "550",
              "type": "string"
            },
            {
              "value": "600",
              "type": "string"
            },
            {
              "value": "650",
              "type": "string"
            },
            {
              "value": "700",
              "type": "string"
            },
            {
              "value": "750",
              "type": "string"
            },
            {
              "value": "800",
              "type": "string"
            },
            {
              "value": "850",
              "type": "string"
            },
            {
              "value": "900",
              "type": "string"
            },
            {
              "value": "950",
              "type": "string"
            },
            {
              "value": "1000",
              "type": "string"
            },
            {
              "value": "1050",
              "type": "string"
            },
            {
              "value": "1100",
              "type": "string"
            },
            {
              "value": "1150",
              "type": "string"
            },
            {
              "value": "1200",
              "type": "string"
            },
            {
              "value": "1250",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "marginTop",
          "type": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
          "complexType": {
            "original": "SpacingValues",
            "resolved": "\"0\" | \"25\" | \"50\" | \"75\" | \"100\" | \"125\" | \"150\" | \"175\" | \"200\" | \"225\" | \"250\" | \"300\" | \"350\" | \"400\" | \"450\" | \"500\" | \"550\" | \"600\" | \"650\" | \"700\" | \"750\" | \"800\" | \"850\" | \"900\" | \"950\" | \"1000\" | \"1050\" | \"1100\" | \"1150\" | \"1200\" | \"1250\"",
            "references": {
              "SpacingValues": {
                "location": "import",
                "path": "../../utils/types/spacing",
                "id": "src/utils/types/spacing.tsx::SpacingValues"
              }
            }
          },
          "mutable": true,
          "attr": "margin-top",
          "reflectToAttr": false,
          "docs": "Adds margin above the text.",
          "docsTags": [
            {
              "name": "default",
              "text": "'0'"
            }
          ],
          "default": "'0'",
          "values": [
            {
              "value": "0",
              "type": "string"
            },
            {
              "value": "25",
              "type": "string"
            },
            {
              "value": "50",
              "type": "string"
            },
            {
              "value": "75",
              "type": "string"
            },
            {
              "value": "100",
              "type": "string"
            },
            {
              "value": "125",
              "type": "string"
            },
            {
              "value": "150",
              "type": "string"
            },
            {
              "value": "175",
              "type": "string"
            },
            {
              "value": "200",
              "type": "string"
            },
            {
              "value": "225",
              "type": "string"
            },
            {
              "value": "250",
              "type": "string"
            },
            {
              "value": "300",
              "type": "string"
            },
            {
              "value": "350",
              "type": "string"
            },
            {
              "value": "400",
              "type": "string"
            },
            {
              "value": "450",
              "type": "string"
            },
            {
              "value": "500",
              "type": "string"
            },
            {
              "value": "550",
              "type": "string"
            },
            {
              "value": "600",
              "type": "string"
            },
            {
              "value": "650",
              "type": "string"
            },
            {
              "value": "700",
              "type": "string"
            },
            {
              "value": "750",
              "type": "string"
            },
            {
              "value": "800",
              "type": "string"
            },
            {
              "value": "850",
              "type": "string"
            },
            {
              "value": "900",
              "type": "string"
            },
            {
              "value": "950",
              "type": "string"
            },
            {
              "value": "1000",
              "type": "string"
            },
            {
              "value": "1050",
              "type": "string"
            },
            {
              "value": "1100",
              "type": "string"
            },
            {
              "value": "1150",
              "type": "string"
            },
            {
              "value": "1200",
              "type": "string"
            },
            {
              "value": "1250",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"body\" | \"small\"",
          "complexType": {
            "original": "'body' | 'small'",
            "resolved": "\"body\" | \"small\"",
            "references": {}
          },
          "mutable": true,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets the appropriate HTML tags for the selected size.",
          "docsTags": [
            {
              "name": "default",
              "text": "'body'"
            }
          ],
          "default": "'body'",
          "values": [
            {
              "value": "body",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "textRole",
          "type": "\"light\" | \"primary\" | \"secondary\"",
          "complexType": {
            "original": "'light' | 'primary' | 'secondary'",
            "resolved": "\"light\" | \"primary\" | \"secondary\"",
            "references": {}
          },
          "mutable": true,
          "attr": "text-role",
          "reflectToAttr": false,
          "docs": "Sets the main style of the text.",
          "docsTags": [
            {
              "name": "default",
              "text": "'primary'"
            }
          ],
          "default": "'primary'",
          "values": [
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the content of the text element."
        }
      ],
      "parts": [
        {
          "name": "text",
          "docs": ""
        }
      ],
      "dependents": [
        "gcds-card",
        "gcds-date-modified",
        "gcds-error-message",
        "gcds-file-uploader",
        "gcds-hint",
        "gcds-textarea"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gcds-card": [
          "gcds-text"
        ],
        "gcds-date-modified": [
          "gcds-text"
        ],
        "gcds-error-message": [
          "gcds-text"
        ],
        "gcds-file-uploader": [
          "gcds-text"
        ],
        "gcds-hint": [
          "gcds-text"
        ],
        "gcds-textarea": [
          "gcds-text"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-textarea/gcds-textarea.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-textarea",
      "readme": "# gcds-textarea\n\n\n",
      "docs": "A text area is a space to enter long-form information in response to a question or instruction.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "characterCount",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "character-count",
          "reflectToAttr": false,
          "docs": "Sets the maxlength attribute for the textarea element.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "cols",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": false,
          "docs": "Defines width for textarea cols (the min-width for textarea's is 50%).",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Specifies if a textarea element is disabled or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "errorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "error-message",
          "reflectToAttr": false,
          "docs": "Error message for an invalid textarea element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-label",
          "reflectToAttr": false,
          "docs": "Specifies if the label is hidden or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "Hint displayed below the label and above the textarea field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Form field label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name attribute for a textarea element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies if a form field is required or not.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rows",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "Default value for textarea rows.",
          "docsTags": [
            {
              "name": "default",
              "text": "5"
            }
          ],
          "default": "5",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "textareaId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "textarea-id",
          "reflectToAttr": false,
          "docs": "Id attribute for a textarea element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        },
        {
          "name": "validateOn",
          "type": "\"blur\" | \"other\" | \"submit\"",
          "complexType": {
            "original": "'blur' | 'submit' | 'other'",
            "resolved": "\"blur\" | \"other\" | \"submit\"",
            "references": {}
          },
          "mutable": true,
          "attr": "validate-on",
          "reflectToAttr": false,
          "docs": "Set event to call validator",
          "docsTags": [
            {
              "name": "default",
              "text": "'blur'"
            }
          ],
          "default": "'blur'",
          "values": [
            {
              "value": "blur",
              "type": "string"
            },
            {
              "value": "other",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "validator",
          "type": "(string | ValidatorEntry | Validator<string>)[]",
          "complexType": {
            "original": "Array<\n    string | ValidatorEntry | Validator<string>\n  >",
            "resolved": "(string | ValidatorEntry | Validator<string>)[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "ValidatorEntry": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::ValidatorEntry"
              },
              "Validator": {
                "location": "import",
                "path": "../../validators",
                "id": "src/validators/index.ts::Validator"
              }
            }
          },
          "mutable": true,
          "attr": "validator",
          "reflectToAttr": false,
          "docs": "Array of validators",
          "docsTags": [],
          "values": [
            {
              "type": "(string"
            },
            {
              "type": "ValidatorEntry"
            },
            {
              "type": "Validator<string>)[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default value for an input element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "validate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLGcdsTextareaElement": {
                "location": "global",
                "id": "global::HTMLGcdsTextareaElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "validate() => Promise<void>",
          "parameters": [],
          "docs": "Call any active validators",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "gcdsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the textarea loses focus.",
          "docsTags": []
        },
        {
          "event": "gcdsChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the textarea has changed.",
          "docsTags": []
        },
        {
          "event": "gcdsError",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the textarea has a validation error.",
          "docsTags": []
        },
        {
          "event": "gcdsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the textarea has focus.",
          "docsTags": []
        },
        {
          "event": "gcdsInput",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the textarea has received input.",
          "docsTags": []
        },
        {
          "event": "gcdsValid",
          "detail": "object",
          "bubbles": true,
          "complexType": {
            "original": "object",
            "resolved": "object",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the textarea has a validation error.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "submit",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-label",
        "gcds-hint",
        "gcds-error-message",
        "gcds-text"
      ],
      "dependencyGraph": {
        "gcds-textarea": [
          "gcds-label",
          "gcds-hint",
          "gcds-error-message",
          "gcds-text"
        ],
        "gcds-hint": [
          "gcds-text"
        ],
        "gcds-error-message": [
          "gcds-text",
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-top-nav/gcds-top-nav.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-top-nav",
      "readme": "# gcds-top-nav\n\n\n",
      "docs": "A top navigation is a horizontal list of page links.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Slot for the navigation groups and navigation links."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "alignment",
          "type": "\"center\" | \"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'center' | 'right'",
            "resolved": "\"center\" | \"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": false,
          "docs": "Nav alignment",
          "docsTags": [
            {
              "name": "default",
              "text": "'left'"
            }
          ],
          "default": "'left'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for navigation landmark",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "getNavSize",
          "returns": {
            "type": "Promise<\"desktop\" | \"mobile\">",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<\"desktop\" | \"mobile\">",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<\"desktop\" | \"mobile\">"
          },
          "signature": "getNavSize() => Promise<\"desktop\" | \"mobile\">",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "updateNavItemQueue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(el: any, includeElement?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "el",
                "type": "any",
                "docs": ""
              },
              {
                "name": "includeElement",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateNavItemQueue(el: any, includeElement?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "el",
              "type": "any",
              "docs": ""
            },
            {
              "name": "includeElement",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "updateNavSize",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(size: any) => Promise<void>",
            "parameters": [
              {
                "name": "size",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateNavSize(size: any) => Promise<void>",
          "parameters": [
            {
              "name": "size",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "focusin",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "gcdsClick",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Slot for the navigation groups and navigation links."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-nav-group"
      ],
      "dependencyGraph": {
        "gcds-top-nav": [
          "gcds-nav-group"
        ],
        "gcds-nav-group": [
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-topic-menu/gcds-topic-menu.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-topic-menu",
      "readme": "# gcds-topic-menu\n\n\n",
      "docs": "The theme and topic menu is a navigation to the top tasks of Government of Canada websites.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "home",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "home",
          "reflectToAttr": false,
          "docs": "Sets the homepage styling",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "closeAllMenus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "closeAllMenus() => Promise<void>",
          "parameters": [],
          "docs": "Close all theme menus",
          "docsTags": []
        },
        {
          "name": "getNavSize",
          "returns": {
            "type": "Promise<\"desktop\" | \"mobile\">",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<\"desktop\" | \"mobile\">",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<\"desktop\" | \"mobile\">"
          },
          "signature": "getNavSize() => Promise<\"desktop\" | \"mobile\">",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "toggleNav",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLGcdsTopicMenuElement": {
                "location": "global",
                "id": "global::HTMLGcdsTopicMenuElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "toggleNav() => Promise<void>",
          "parameters": [],
          "docs": "Toggle open theme and topic menu",
          "docsTags": []
        },
        {
          "name": "updateNavItemQueue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(parent: any) => Promise<void>",
            "parameters": [
              {
                "name": "parent",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateNavItemQueue(parent: any) => Promise<void>",
          "parameters": [
            {
              "name": "parent",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Update keyboard focus queue",
          "docsTags": []
        },
        {
          "name": "updateNavSize",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(size: any) => Promise<void>",
            "parameters": [
              {
                "name": "size",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateNavSize(size: any) => Promise<void>",
          "parameters": [
            {
              "name": "size",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-sr-only",
        "gcds-icon"
      ],
      "dependencyGraph": {
        "gcds-topic-menu": [
          "gcds-sr-only",
          "gcds-icon"
        ]
      }
    },
    {
      "filePath": "src/components/gcds-verify-banner/gcds-verify-banner.tsx",
      "encapsulation": "shadow",
      "tag": "gcds-verify-banner",
      "readme": "# gcds-verify-banner\n\n\n",
      "docs": "Verify banner helps users verify they are on an official Government of Canada website by providing clear information on how to recognize legitimate Government of Canada domains and secure connections.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "container",
          "type": "\"full\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
          "complexType": {
            "original": "'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs'",
            "resolved": "\"full\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
            "references": {}
          },
          "mutable": false,
          "attr": "container",
          "reflectToAttr": false,
          "docs": "Defines the container width of the verify banner content",
          "docsTags": [
            {
              "name": "default",
              "text": "'xl'"
            }
          ],
          "default": "'xl'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "isFixed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-fixed",
          "reflectToAttr": false,
          "docs": "Defines if the banner's position is fixed.",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gcds-grid"
      ],
      "dependencyGraph": {
        "gcds-verify-banner": [
          "gcds-grid"
        ],
        "gcds-grid": [
          "gcds-container"
        ]
      }
    }
  ],
  "typeLibrary": {
    "src/components/gcds-grid/gcds-grid.tsx::GridGapValues": {
      "declaration": "export type GridGapValues =\n  | '150'\n  | '175'\n  | '200'\n  | '225'\n  | '250'\n  | '300'\n  | '350'\n  | '400'\n  | '450'\n  | '500'\n  | '550'\n  | '600'\n  | '650'\n  | '700'\n  | '750'\n  | '800';",
      "docstring": "",
      "path": "src/components/gcds-grid/gcds-grid.tsx"
    },
    "src/components/gcds-grid/gcds-grid.tsx::ContentValues": {
      "declaration": "export type ContentValues =\n  | 'center'\n  | 'end'\n  | 'space-around'\n  | 'space-between'\n  | 'space-evenly'\n  | 'start'\n  | 'stretch';",
      "docstring": "",
      "path": "src/components/gcds-grid/gcds-grid.tsx"
    },
    "src/components/gcds-checkboxes/checkbox.tsx::CheckboxObject": {
      "declaration": "{\n  id: string;\n  label: string;\n  value?: string;\n  hint?: string;\n  checked?: boolean | string;\n}",
      "docstring": "",
      "path": "src/components/gcds-checkboxes/checkbox.tsx"
    },
    "src/validators/index.ts::ValidatorEntry": {
      "declaration": "any",
      "docstring": "",
      "path": "src/validators/index.ts"
    },
    "src/validators/index.ts::Validator": {
      "declaration": "any",
      "docstring": "",
      "path": "src/validators/index.ts"
    },
    "src/utils/types/spacing.tsx::SpacingValues": {
      "declaration": "export type SpacingValues =\n  | '0'\n  | '25'\n  | '50'\n  | '75'\n  | '100'\n  | '125'\n  | '150'\n  | '175'\n  | '200'\n  | '225'\n  | '250'\n  | '300'\n  | '350'\n  | '400'\n  | '450'\n  | '500'\n  | '550'\n  | '600'\n  | '650'\n  | '700'\n  | '750'\n  | '800'\n  | '850'\n  | '900'\n  | '950'\n  | '1000'\n  | '1050'\n  | '1100'\n  | '1150'\n  | '1200'\n  | '1250';",
      "docstring": "",
      "path": "src/utils/types/spacing.tsx"
    },
    "src/components/gcds-radios/radio.tsx::RadioObject": {
      "declaration": "{\n  id: string;\n  label: string;\n  value: string;\n  hint?: string;\n  checked?: boolean;\n}",
      "docstring": "",
      "path": "src/components/gcds-radios/radio.tsx"
    }
  }
}