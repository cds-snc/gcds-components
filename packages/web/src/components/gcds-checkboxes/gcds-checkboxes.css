@layer reset, default, disabled, error, focus;

@layer reset {
  :host {
    display: block;

    .gcds-checkboxes__fieldset {
      border: 0;
      padding: 0;
      min-inline-size: auto;

      legend {
        padding: 0;
      }
    }

    .gcds-checkbox {
      padding: 0;

      gcds-label > label {
        &:before,
        &:after {
          cursor: pointer;
          content: '';
          box-sizing: border-box;
          position: absolute;
        }
      }
    }
  }
}

@layer default {
  :host {
    .gcds-checkboxes__fieldset {
      margin: var(--gcds-checkbox-fieldset-margin);

      .gcds-checkboxes__legend {
        font: var(--gcds-checkbox-legend-font-desktop);
        margin: var(--gcds-checkbox-legend-margin);
  
        .legend__required {
          font: var(--gcds-checkbox-legend-required-font-desktop);
        }
  
        @media only screen and (width < 48em) {
          font: var(--gcds-checkbox-legend-font-mobile);
  
          .legend__required {
            font: var(--gcds-checkbox-legend-required-font-mobile);
          }
        }
  
        &:not(:has(+ gcds-hint)) {
          margin: var(--gcds-checkbox-legend-hint-margin);
        }
      }
    }

    .gcds-checkbox {
      position: relative;
      max-width: var(--gcds-checkbox-max-width);
      min-height: calc(
        var(--gcds-checkbox-input-height-and-width) - var(--gcds-checkbox-padding)
      );
      font: var(--gcds-checkbox-font);
      color: var(--gcds-checkbox-default-text);
      margin: var(--gcds-checkbox-margin) !important;
      padding: var(--gcds-checkbox-padding) 0 0;
      transition: color ease-in-out 0.15s;
  
      :is(gcds-label, gcds-hint, gcds-error-message) {
        padding: var(--gcds-checkbox-label-padding) !important;
      }
  
      gcds-hint::part(hint) {
        margin: 0;
      }
  
      input,
      gcds-label:before,
      gcds-label:after {
        position: absolute;
      }
  
      input,
      gcds-label>label:before {
        top: 0;
        left: 0;
        width: var(--gcds-checkbox-input-height-and-width);
        height: var(--gcds-checkbox-input-height-and-width);
      }
  
      input {
        opacity: 0;
      }
  
      gcds-label > label {
        width: fit-content;
        --gcds-label-font-desktop: var(--gcds-checkbox-label-font-desktop);
        --gcds-label-font-mobile: var(--gcds-checkbox-label-font-mobile);
  
        &:before {
          border: var(--gcds-checkbox-input-border-width) solid currentcolor;
          border-radius: var(--gcds-checkbox-input-border-radius);
          transition:
            border-color ease-in-out 0.15s,
            box-shadow ease-in-out 0.15s,
            outline ease-in-out 0.15s;
        }
  
        &:after {
          border: var(--gcds-checkbox-check-border-width) solid currentcolor;
          border-inline-start: 0 !important;
          border-block-start: 0 !important;
          height: var(--gcds-checkbox-check-height);
          width: var(--gcds-checkbox-check-width);
          left: var(--gcds-checkbox-check-left);
          opacity: 0;
          top: var(--gcds-checkbox-check-top);
          transform: rotate(40deg);
        }
      }
  
      input:checked + gcds-label > label:after {
        opacity: 1;
      }
    }
  }
}

@layer disabled {
  :host .gcds-checkbox.gcds-checkbox--disabled {
    color: var(--gcds-checkbox-disabled-text);

    gcds-label > label {
      --gcds-label-text: currentColor;
      cursor: not-allowed;

      &:before,
      &:after {
        cursor: not-allowed;
      }

      &:before {
        border-color: currentcolor;
        background-color: var(--gcds-checkbox-disabled-background);
      }
    }

    gcds-hint {
      --gcds-hint-text: currentColor;
    }
  }
}

@layer error {
  :host .gcds-checkbox.gcds-checkbox--error:not(:focus-within) gcds-label > label {
    &:before {
      border-color: var(--gcds-checkbox-danger-border);
    }

    &:after {
      color: var(--gcds-checkbox-danger-border);
    }
  }
}

@layer focus {
  :host .gcds-checkbox:focus-within {
    input:focus + gcds-label > label:before {
      color: var(--gcds-checkbox-focus-color);
      outline: var(--gcds-checkbox-focus-outline-width) solid currentcolor;
      outline-offset: var(--gcds-checkbox-input-border-width);
      box-shadow: var(--gcds-checkbox-focus-box-shadow);
      background: var(--gcds-checkbox-focus-background);
    }

    input:focus + gcds-label > label:after {
      color: var(--gcds-checkbox-focus-color);
    }
  }
}
