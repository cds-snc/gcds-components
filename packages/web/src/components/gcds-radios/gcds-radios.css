@layer reset, default, disabled, error, focus, a11y.highcontrast;

@layer reset {
  :host {
    display: block;

    .gcds-radios__fieldset {
      border: 0;
      padding: 0;
      min-inline-size: auto;

      legend {
        padding: 0;
      }
    }

    .gcds-radio {
      padding: 0;
      border: 0;

      gcds-label {
        display: block;
        & > label {
          &:before,
          &:after {
            cursor: pointer;
            content: '';
            box-sizing: border-box;
            position: absolute;
          }
        }
      }
    }
  }
}

@layer default {
  :host {
    .gcds-radios__legend {
      font: var(--gcds-radio-legend-font-desktop);
      margin: var(--gcds-radio-legend-margin);

      .legend__required {
        font: var(--gcds-radio-legend-required-font-desktop);
      }

      @media only screen and (width < 48em) {
        font: var(--gcds-radio-legend-font-mobile);

        .legend__required {
          font: var(--gcds-radio-legend-required-font-mobile);
        }
      }

      &:not(:has(+ gcds-hint)) {
        margin: var(--gcds-radio-legend-hint-margin);
      }
    }

    gcds-hint:part(hint) {
      margin: var(--gcds-radio-hint-margin);
    }

    .gcds-radio {
      position: relative;
      max-width: var(--gcds-radio-max-width);
      min-height: calc(
        var(--gcds-radio-input-height-and-width) - var(--gcds-radio-padding)
      );
      font: var(--gcds-radio-font);
      color: var(--gcds-radio-default-text);
      margin: var(--gcds-radio-margin) !important;
      padding: var(--gcds-radio-padding) 0 0;
      transition: color ease-in-out 0.15s;

      :is(gcds-label, gcds-hint) {
        padding: var(--gcds-radio-label-padding) !important;
      }

      gcds-hint::part(hint) {
        margin: 0;
      }

      input,
      gcds-label:before,
      gcds-label:after {
        position: absolute;
      }

      input,
      gcds-label > label:before {
        top: 0;
        left: 0;
        height: var(--gcds-radio-input-height-and-width);
        width: var(--gcds-radio-input-height-and-width);
      }

      input {
        opacity: 0;
      }

      gcds-label > label {
        width: fit-content;
        --gcds-label-font-desktop: var(--gcds-radio-label-font-desktop);
        --gcds-label-font-mobile: var(--gcds-radio-label-font-mobile);

        &:before,
        &:after {
          border-radius: var(--gcds-radio-border-radius);
        }

        &:before {
          background-color: var(--gcds-radio-default-background);
          border: var(--gcds-radio-input-border-width) solid currentcolor;
          transition:
            border-color ease-in-out 0.15s,
            box-shadow ease-in-out 0.15s,
            outline ease-in-out 0.15s;
        }

        &:after {
          height: var(--gcds-radio-check-height-and-width);
          width: var(--gcds-radio-check-height-and-width);
          left: var(--gcds-radio-check-left);
          opacity: 0;
          top: var(--gcds-radio-check-top);
          background-color: currentcolor;
        }
      }

      input:checked + gcds-label > label:after {
        opacity: 1;
      }
    }
  }
}

@layer disabled {
  :host .gcds-radio.gcds-radio--disabled {
    color: var(--gcds-radio-disabled-text);

    gcds-label > label {
      --gcds-label-text: currentColor;
      cursor: not-allowed;

      &:before,
      &:after {
        cursor: not-allowed;
      }

      &:before {
        border-color: var(--gcds-radio-disabled-border);
        background-color: var(--gcds-radio-disabled-background);
      }
    }

    gcds-hint {
      --gcds-hint-text: currentColor;
    }
  }
}

@layer error {
  :host {
    gcds-error-message {
      margin: var(--gcds-radio-error-message-margin);
    }

    .gcds-radio.gcds-radio--error:not(:focus-within) gcds-label > label {
      &:before {
        border-color: var(--gcds-radio-danger-border);
      }

      &:after {
        background-color: var(--gcds-radio-danger-border);
      }
    }
  }
}

@layer focus {
  :host .gcds-radio:focus-within {
    input:focus + gcds-label > label:before {
      color: var(--gcds-radio-focus-color);
      outline: var(--gcds-radio-focus-outline-width) solid currentcolor;
      outline-offset: var(--gcds-radio-input-border-width);
      box-shadow: var(--gcds-radio-focus-box-shadow);
      background: var(--gcds-radio-focus-background);
    }

    input:focus + gcds-label > label:after {
      box-shadow: inset 0 0 2rem var(--gcds-radio-focus-color);
    }
  }
}

@layer a11y.highcontrast {
  :host .gcds-radio gcds-label > label::after {
    @media (prefers-color-scheme: light) {
      background-color: buttonText;
    }
    @media (prefers-color-scheme: dark) {
      background-color: buttonText;
    }
  }
}
