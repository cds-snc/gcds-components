"use strict";(self.webpackChunk_cdssnc_gcds_components=self.webpackChunk_cdssnc_gcds_components||[]).push([[431],{"./src/components/gcds-radios/stories/gcds-radios.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CheckedProp:()=>CheckedProp,CheckedValue:()=>CheckedValue,Default:()=>Default,Disabled:()=>Disabled,Error:()=>Error,Hint:()=>Hint,Playground:()=>Playground,Props:()=>Props,Required:()=>Required,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _utils_storybook_component_properties__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/utils/storybook/component-properties.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Radios",parameters:{actions:{argTypesRegex:"^gcds.*",handles:["RadioChange","focus","blur"]}},argTypes:{name:{control:"text",table:{type:{summary:"string"},defaultValue:{summary:"-"}},type:{required:!0}},options:{control:"text",table:{type:{summary:"\n        {\n          id: string;\n          label: string;\n          value: string;\n          hint?: string;\n          checked?: boolean;\n          required?: boolean;\n          disabled?: boolean;\n        }\n        string | object[]"},defaultValue:{summary:"-"}},type:{required:!0}},disabled:{control:{type:"select"},options:[!1,!0],table:{type:{summary:"boolean"},defaultValue:{summary:!1}}},errorMessage:{name:"error-message",control:"text",table:{type:{summary:"string"},defaultValue:{summary:"-"}}},hint:{control:"text",table:{type:{summary:"string"},defaultValue:{summary:"-"}}},legend:{control:"text",table:{type:{summary:"string"},defaultValue:{summary:"-"}},type:{required:!0}},required:{control:{type:"select"},options:[!1,!0],table:{type:{summary:"boolean"},defaultValue:{summary:!1}}},value:{control:"text",table:{type:{summary:"string"},defaultValue:{summary:"-"}}},..._utils_storybook_component_properties__WEBPACK_IMPORTED_MODULE_0__.qK,..._utils_storybook_component_properties__WEBPACK_IMPORTED_MODULE_0__.fd,gcdsChange:{action:"RadioChange",..._utils_storybook_component_properties__WEBPACK_IMPORTED_MODULE_0__.in},gcdsFocus:{action:"focus",..._utils_storybook_component_properties__WEBPACK_IMPORTED_MODULE_0__.in},gcdsBlur:{action:"blur",..._utils_storybook_component_properties__WEBPACK_IMPORTED_MODULE_0__.in}}},Template=args=>`\n\x3c!-- Web component code (HTML, Angular, Vue) --\x3e\n<gcds-radios\n  name="${args.name}"\n  legend="${args.legend}"\n  options='${args.options}'\n  ${args.hint?`hint="${args.hint}"`:null}\n  ${args.errorMessage?`error-message="${args.errorMessage}"`:null}\n  ${args.required?"required":null}\n  ${args.disabled?"disabled":null}\n  ${args.value?`value="${args.value}"`:null}\n  ${"blur"!=args.validateOn?`validate-on="${args.validateOn}"`:null}\n  ${"en"!=args.lang?`lang="${args.lang}"`:null}\n>\n</gcds-radios>\n\n\x3c!-- React code --\x3e\n<GcdsRadios\n  name="${args.name}"\n  legend="${args.legend}"\n  options='${args.options}'\n  ${args.hint?`hint="${args.hint}"`:null}\n  ${args.errorMessage?`errorMessage="${args.errorMessage}"`:null}\n  ${args.required?"required":null}\n  ${args.disabled?"disabled":null}\n  ${args.value?`value="${args.value}"`:null}\n  ${"blur"!=args.validateOn?`validate-on="${args.validateOn}"`:null}\n  ${"en"!=args.lang?`lang="${args.lang}"`:null}\n>\n</GcdsRadios>\n`.replace(/\s\snull\n/g,""),Default=Template.bind({});Default.args={name:"radioDefault",legend:"Legend",options:'[\n    { "label": "Label for radio 1", "id": "radio1", "value": "radio1"},\n    { "label": "Label for radio 2", "id": "radio2", "value": "radio2"}\n  ]',hint:"",errorMessage:"",required:!1,disabled:!1,value:"",validateOn:"blur",lang:"en"};const Hint=Template.bind({});Hint.args={name:"radio",legend:"Legend",options:'[\n    { "label": "Label for radio 1", "id": "radio1", "value": "radio1", "hint": "Description or example to make the option clearer."},\n    { "label": "Label for radio 2", "id": "radio2", "value": "radio2", "hint": "Description or example to make the option clearer."}\n  ]',hint:"Hint text",errorMessage:"",required:!1,disabled:!1,value:"",validateOn:"blur",lang:"en"};const Required=Template.bind({});Required.args={name:"radio",legend:"Legend",options:'[\n    { "label": "Label for radio 1", "id": "radio1", "value": "radio1"},\n    { "label": "Label for radio 2", "id": "radio2", "value": "radio2"}\n  ]',hint:"",errorMessage:"",required:!0,disabled:!1,value:"",validateOn:"blur",lang:"en"};const Disabled=Template.bind({});Disabled.args={name:"radio",legend:"Legend",options:'[\n    { "label": "Label for radio 1", "id": "radio1", "value": "radio1"},\n    { "label": "Label for radio 2", "id": "radio2", "value": "radio2"}\n  ]',hint:"",errorMessage:"",required:!1,disabled:!0,value:"",validateOn:"blur",lang:"en"};const CheckedProp=Template.bind({});CheckedProp.args={name:"radio",legend:"Legend",options:'[\n    { "label": "Label for radio 1", "id": "radio1", "value": "radio1"},\n    { "label": "Label for radio 2", "id": "radio2", "value": "radio2", "checked": true}\n  ]',hint:"",errorMessage:"",required:!1,disabled:!1,value:"",validateOn:"blur",lang:"en"};const CheckedValue=Template.bind({});CheckedValue.args={name:"radio",legend:"Legend",options:'[\n    { "label": "Label for radio 1", "id": "radio1", "value": "radio1"},\n    { "label": "Label for radio 2", "id": "radio2", "value": "radio2"}\n  ]',hint:"",errorMessage:"",required:!1,disabled:!1,value:"radio1",validateOn:"blur",lang:"en"};const Error=Template.bind({});Error.args={name:"radioDefault",legend:"Legend",options:'[\n    { "label": "Label for radio 1", "id": "radio1", "value": "radio1"},\n    { "label": "Label for radio 2", "id": "radio2", "value": "radio2"}\n  ]',hint:"",errorMessage:"Error message",required:!1,disabled:!1,value:"",validateOn:"blur",lang:"en"};const Props=Template.bind({});Props.args={name:"radio",legend:"Legend",options:'[\n    { "label": "Label for radio 1", "id": "radio1", "value": "radio1"},\n    { "label": "Label for radio 2", "id": "radio2", "value": "radio2"}\n  ]',hint:"",errorMessage:"",required:!1,disabled:!1,value:"",validateOn:"blur",lang:"en"};const Playground=(args=>`\n\x3c!-- Web component code (Angular, Vue) --\x3e\n<gcds-radios\n  name="${args.name}"\n  legend="${args.legend}"\n  options='${args.options}'\n  ${args.hint?`hint="${args.hint}"`:null}\n  ${args.errorMessage?`error-message="${args.errorMessage}"`:null}\n  ${args.required?"required":null}\n  ${args.disabled?"disabled":null}\n  ${args.value?`value="${args.value}"`:null}\n  ${"blur"!=args.validateOn?`validate-on="${args.validateOn}"`:null}\n  ${"en"!=args.lang?`lang="${args.lang}"`:null}\n>\n</gcds-radios>\n`.replace(/\s\snull\n/g,"")).bind({});Playground.args={name:"radio",legend:"Legend",options:'[\n    { "label": "Label for radio 1", "id": "radio1", "value": "radio1"},\n    { "label": "Label for radio 2", "id": "radio2", "value": "radio2"}\n  ]',hint:"",errorMessage:"",required:!1,disabled:!1,value:"",validateOn:"blur",lang:"en"},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (HTML, Angular, Vue) --\x3e\n<gcds-radios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `error-message="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radios>\n\n\x3c!-- React code --\x3e\n<GcdsRadios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `errorMessage="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</GcdsRadios>\n`.replace(/\\s\\snull\\n/g, \'\')',...Default.parameters?.docs?.source}}},Hint.parameters={...Hint.parameters,docs:{...Hint.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (HTML, Angular, Vue) --\x3e\n<gcds-radios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `error-message="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radios>\n\n\x3c!-- React code --\x3e\n<GcdsRadios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `errorMessage="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</GcdsRadios>\n`.replace(/\\s\\snull\\n/g, \'\')',...Hint.parameters?.docs?.source}}},Required.parameters={...Required.parameters,docs:{...Required.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (HTML, Angular, Vue) --\x3e\n<gcds-radios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `error-message="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radios>\n\n\x3c!-- React code --\x3e\n<GcdsRadios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `errorMessage="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</GcdsRadios>\n`.replace(/\\s\\snull\\n/g, \'\')',...Required.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (HTML, Angular, Vue) --\x3e\n<gcds-radios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `error-message="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radios>\n\n\x3c!-- React code --\x3e\n<GcdsRadios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `errorMessage="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</GcdsRadios>\n`.replace(/\\s\\snull\\n/g, \'\')',...Disabled.parameters?.docs?.source}}},CheckedProp.parameters={...CheckedProp.parameters,docs:{...CheckedProp.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (HTML, Angular, Vue) --\x3e\n<gcds-radios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `error-message="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radios>\n\n\x3c!-- React code --\x3e\n<GcdsRadios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `errorMessage="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</GcdsRadios>\n`.replace(/\\s\\snull\\n/g, \'\')',...CheckedProp.parameters?.docs?.source}}},CheckedValue.parameters={...CheckedValue.parameters,docs:{...CheckedValue.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (HTML, Angular, Vue) --\x3e\n<gcds-radios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `error-message="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radios>\n\n\x3c!-- React code --\x3e\n<GcdsRadios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `errorMessage="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</GcdsRadios>\n`.replace(/\\s\\snull\\n/g, \'\')',...CheckedValue.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (HTML, Angular, Vue) --\x3e\n<gcds-radios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `error-message="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radios>\n\n\x3c!-- React code --\x3e\n<GcdsRadios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `errorMessage="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</GcdsRadios>\n`.replace(/\\s\\snull\\n/g, \'\')',...Error.parameters?.docs?.source}}},Props.parameters={...Props.parameters,docs:{...Props.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (HTML, Angular, Vue) --\x3e\n<gcds-radios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `error-message="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radios>\n\n\x3c!-- React code --\x3e\n<GcdsRadios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `errorMessage="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</GcdsRadios>\n`.replace(/\\s\\snull\\n/g, \'\')',...Props.parameters?.docs?.source}}},Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (Angular, Vue) --\x3e\n<gcds-radios\n  name="${args.name}"\n  legend="${args.legend}"\n  options=\'${args.options}\'\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.errorMessage ? `error-message="${args.errorMessage}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.validateOn != \'blur\' ? `validate-on="${args.validateOn}"` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radios>\n`.replace(/\\s\\snull\\n/g, \'\')',...Playground.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Hint","Required","Disabled","CheckedProp","CheckedValue","Error","Props","Playground"]},"./src/utils/storybook/component-properties.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{fd:()=>validatorProps,in:()=>eventProp,qK:()=>langProp});const langProp={lang:{control:{type:"select"},options:["en","fr"],table:{type:{summary:"string"},defaultValue:{summary:"en"}}}},validatorProps={validateOn:{name:"validate-on",control:{type:"select"},options:["blur","other"],table:{type:{summary:"string"},defaultValue:{summary:"blur"}}}},eventProp={control:{type:{}},table:{category:"Events | Événements"}}}}]);